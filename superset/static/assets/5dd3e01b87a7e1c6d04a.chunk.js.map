{"version":3,"file":"5dd3e01b87a7e1c6d04a.chunk.js","mappings":"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","sources":["webpack://superset/./src/explore/components/controls/TextAreaControl.jsx","webpack://superset/./src/components/CronPicker/CronPicker.tsx","webpack://superset/./src/components/TimezoneSelector/index.tsx","webpack://superset/./src/features/alerts/components/NumberInput.tsx","webpack://superset/./src/features/alerts/components/AlertReportCronScheduler.tsx","webpack://superset/./src/features/alerts/components/NotificationMethod.tsx","webpack://superset/./src/features/alerts/components/ValidatedPanelHeader.tsx","webpack://superset/./src/features/alerts/components/StyledPanel.tsx","webpack://superset/./src/features/alerts/buildErrorTooltipMessage.tsx","webpack://superset/./src/features/alerts/AlertReportModal.tsx","webpack://superset/./src/features/alerts/types.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { TextArea } from 'src/components/Input';\nimport { t, withTheme } from '@superset-ui/core';\n\nimport Button from 'src/components/Button';\nimport { TextAreaEditor } from 'src/components/AsyncAceEditor';\nimport ModalTrigger from 'src/components/ModalTrigger';\n\nimport ControlHeader from 'src/explore/components/ControlHeader';\n\nconst propTypes = {\n  name: PropTypes.string,\n  onChange: PropTypes.func,\n  initialValue: PropTypes.string,\n  height: PropTypes.number,\n  minLines: PropTypes.number,\n  maxLines: PropTypes.number,\n  offerEditInModal: PropTypes.bool,\n  language: PropTypes.oneOf([\n    null,\n    'json',\n    'html',\n    'sql',\n    'markdown',\n    'javascript',\n  ]),\n  aboveEditorSection: PropTypes.node,\n  readOnly: PropTypes.bool,\n  resize: PropTypes.oneOf([\n    null,\n    'block',\n    'both',\n    'horizontal',\n    'inline',\n    'none',\n    'vertical',\n  ]),\n  textAreaStyles: PropTypes.object,\n};\n\nconst defaultProps = {\n  onChange: () => {},\n  initialValue: '',\n  height: 250,\n  minLines: 3,\n  maxLines: 10,\n  offerEditInModal: true,\n  readOnly: false,\n  resize: null,\n  textAreaStyles: {},\n};\n\nclass TextAreaControl extends Component {\n  onControlChange(event) {\n    const { value } = event.target;\n    this.props.onChange(value);\n  }\n\n  onAreaEditorChange(value) {\n    this.props.onChange(value);\n  }\n\n  renderEditor(inModal = false) {\n    const minLines = inModal ? 40 : this.props.minLines || 12;\n    if (this.props.language) {\n      const style = {\n        border: `1px solid ${this.props.theme.colors.grayscale.light1}`,\n        minHeight: `${minLines}em`,\n        width: 'auto',\n        ...this.props.textAreaStyles,\n      };\n      if (this.props.resize) {\n        style.resize = this.props.resize;\n      }\n      if (this.props.readOnly) {\n        style.backgroundColor = '#f2f2f2';\n      }\n\n      return (\n        <TextAreaEditor\n          mode={this.props.language}\n          style={style}\n          minLines={minLines}\n          maxLines={inModal ? 1000 : this.props.maxLines}\n          editorProps={{ $blockScrolling: true }}\n          defaultValue={this.props.initialValue}\n          readOnly={this.props.readOnly}\n          key={this.props.name}\n          {...this.props}\n          onChange={this.onAreaEditorChange.bind(this)}\n        />\n      );\n    }\n    return (\n      <TextArea\n        placeholder={t('textarea')}\n        onChange={this.onControlChange.bind(this)}\n        defaultValue={this.props.initialValue}\n        disabled={this.props.readOnly}\n        style={{ height: this.props.height }}\n      />\n    );\n  }\n\n  renderModalBody() {\n    return (\n      <>\n        <div>{this.props.aboveEditorSection}</div>\n        {this.renderEditor(true)}\n      </>\n    );\n  }\n\n  render() {\n    const controlHeader = <ControlHeader {...this.props} />;\n    return (\n      <div>\n        {controlHeader}\n        {this.renderEditor()}\n        {this.props.offerEditInModal && (\n          <ModalTrigger\n            modalTitle={controlHeader}\n            triggerNode={\n              <Button buttonSize=\"small\" className=\"m-t-5\">\n                {t('Edit')} <strong>{this.props.language}</strong>{' '}\n                {t('in modal')}\n              </Button>\n            }\n            modalBody={this.renderModalBody(true)}\n            responsive\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nTextAreaControl.propTypes = propTypes;\nTextAreaControl.defaultProps = defaultProps;\n\nexport default withTheme(TextAreaControl);\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { ConfigProvider } from 'antd';\nimport { styled, t } from '@superset-ui/core';\nimport ReactCronPicker, { Locale, CronProps } from 'react-js-cron';\n\nexport * from 'react-js-cron';\n\nexport const LOCALE: Locale = {\n  everyText: t('every'),\n  emptyMonths: t('every month'),\n  emptyMonthDays: t('every day of the month'),\n  emptyMonthDaysShort: t('day of the month'),\n  emptyWeekDays: t('every day of the week'),\n  emptyWeekDaysShort: t('day of the week'),\n  emptyHours: t('every hour'),\n  emptyMinutes: t('every minute'),\n  emptyMinutesForHourPeriod: t('every'),\n  yearOption: t('year'),\n  monthOption: t('month'),\n  weekOption: t('week'),\n  dayOption: t('day'),\n  hourOption: t('hour'),\n  minuteOption: t('minute'),\n  rebootOption: t('reboot'),\n  prefixPeriod: t('Every'),\n  prefixMonths: t('in'),\n  prefixMonthDays: t('on'),\n  prefixWeekDays: t('on'),\n  prefixWeekDaysForMonthAndYearPeriod: t('or'),\n  prefixHours: t('at'),\n  prefixMinutes: t(':'),\n  prefixMinutesForHourPeriod: t('at'),\n  suffixMinutesForHourPeriod: t('minute(s)'),\n  errorInvalidCron: t('Invalid cron expression'),\n  clearButtonText: t('Clear'),\n  weekDays: [\n    // Order is important, the index will be used as value\n    t('Sunday'), // Sunday must always be first, it's \"0\"\n    t('Monday'),\n    t('Tuesday'),\n    t('Wednesday'),\n    t('Thursday'),\n    t('Friday'),\n    t('Saturday'),\n  ],\n  months: [\n    // Order is important, the index will be used as value\n    t('January'),\n    t('February'),\n    t('March'),\n    t('April'),\n    t('May'),\n    t('June'),\n    t('July'),\n    t('August'),\n    t('September'),\n    t('October'),\n    t('November'),\n    t('December'),\n  ],\n  // Order is important, the index will be used as value\n  altWeekDays: [\n    t('SUN'), // Sunday must always be first, it's \"0\"\n    t('MON'),\n    t('TUE'),\n    t('WED'),\n    t('THU'),\n    t('FRI'),\n    t('SAT'),\n  ],\n  // Order is important, the index will be used as value\n  altMonths: [\n    t('JAN'),\n    t('FEB'),\n    t('MAR'),\n    t('APR'),\n    t('MAY'),\n    t('JUN'),\n    t('JUL'),\n    t('AUG'),\n    t('SEP'),\n    t('OCT'),\n    t('NOV'),\n    t('DEC'),\n  ],\n};\n\nexport const CronPicker = styled((props: CronProps) => (\n  <ConfigProvider\n    getPopupContainer={trigger => trigger.parentElement as HTMLElement}\n  >\n    <ReactCronPicker locale={LOCALE} {...props} />\n  </ConfigProvider>\n))`\n  ${({ theme }) => `\n\n    /* Boilerplate styling for ReactCronPicker imported explicitly in GlobalStyles.tsx */\n\n    /* When year period is selected */\n\n    :has(.react-js-cron-months) {\n      display: grid !important;\n      grid-template-columns: repeat(2, 50%);\n      column-gap: ${theme.gridUnit}px;\n      row-gap: ${theme.gridUnit * 2}px;\n      div:has(.react-js-cron-hours) {\n        grid-column: span 2;\n        display: flex;\n        justify-content: space-between;\n        .react-js-cron-field {\n          width: 50%;\n        }\n      }\n    }\n\n    /* When month period is selected */\n\n    :not(:has(.react-js-cron-months)) {\n      display: grid;\n      grid-template-columns: repeat(2, 50%);\n      column-gap: ${theme.gridUnit}px;\n      row-gap: ${theme.gridUnit * 2}px;\n      .react-js-cron-period {\n        grid-column: span 2;\n      }\n      div:has(.react-js-cron-hours) {\n        grid-column: span 2;\n        display: flex;\n        justify-content: space-between;\n        .react-js-cron-field {\n          width: 50%;\n        }\n      }\n    }\n\n    /* When week period is selected */\n\n    :not(:has(.react-js-cron-month-days)) {\n      .react-js-cron-week-days {\n        grid-column: span 2;\n      }\n    }\n\n    /* For proper alignment of inputs and span elements */\n\n    :not(div:has(.react-js-cron-hours)) {\n      display: flex;\n      flex-wrap: nowrap;\n    }\n\n    div:has(.react-js-cron-hours) {\n      width: 100%;\n    }\n\n    .react-js-cron-minutes > span {\n      padding-left: ${theme.gridUnit}px;\n    }\n\n    /* Sizing of select container */\n\n    .react-js-cron-select.ant-select {\n      width: 100%;\n      .ant-select-selector {\n        flex-wrap: nowrap;\n      }\n    }\n\n    .react-js-cron-field {\n      width: 100%;\n      margin-bottom: 0px;\n      > span {\n        margin-left: 0px;\n      }\n    }\n\n    .react-js-cron-custom-select .ant-select-selection-placeholder {\n      flex: auto;\n      border-radius: ${theme.gridUnit}px;\n    }\n\n    .react-js-cron-custom-select .ant-select-selection-overflow-item {\n      align-self: center;\n    }\n\n    .react-js-cron-select > div:first-of-type,\n    .react-js-cron-custom-select {\n      border-radius: ${theme.gridUnit}px;\n    }\n  `}\n`;\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { useEffect, useMemo, useState } from 'react';\nimport { t } from '@superset-ui/core';\nimport { Select } from 'src/components';\nimport Loading from 'src/components/Loading';\n\nconst DEFAULT_TIMEZONE = {\n  name: 'GMT Standard Time',\n  value: 'Africa/Abidjan', // timezones are deduped by the first alphabetical value\n};\n\nconst MIN_SELECT_WIDTH = '400px';\n\nconst offsetsToName = {\n  '-300-240': ['Eastern Standard Time', 'Eastern Daylight Time'],\n  '-360-300': ['Central Standard Time', 'Central Daylight Time'],\n  '-420-360': ['Mountain Standard Time', 'Mountain Daylight Time'],\n  '-420-420': [\n    'Mountain Standard Time - Phoenix',\n    'Mountain Standard Time - Phoenix',\n  ],\n  '-480-420': ['Pacific Standard Time', 'Pacific Daylight Time'],\n  '-540-480': ['Alaska Standard Time', 'Alaska Daylight Time'],\n  '-600-600': ['Hawaii Standard Time', 'Hawaii Daylight Time'],\n  '60120': ['Central European Time', 'Central European Daylight Time'],\n  '00': [DEFAULT_TIMEZONE.name, DEFAULT_TIMEZONE.name],\n  '060': ['GMT Standard Time - London', 'British Summer Time'],\n};\n\nexport type TimezoneSelectorProps = {\n  onTimezoneChange: (value: string) => void;\n  timezone?: string | null;\n  minWidth?: string;\n};\n\nexport default function TimezoneSelector({\n  onTimezoneChange,\n  timezone,\n  minWidth = MIN_SELECT_WIDTH, // smallest size for current values\n}: TimezoneSelectorProps) {\n  const [momentLib, setMomentLib] = useState<\n    typeof import('moment-timezone') | null\n  >(null);\n\n  useEffect(() => {\n    import('moment-timezone').then(momentLib =>\n      setMomentLib(() => momentLib.default),\n    );\n  }, []);\n\n  const { TIMEZONE_OPTIONS, TIMEZONE_OPTIONS_SORT_COMPARATOR, validTimezone } =\n    useMemo(() => {\n      if (!momentLib) {\n        return {};\n      }\n      const currentDate = momentLib();\n      const JANUARY = momentLib([2021, 1]);\n      const JULY = momentLib([2021, 7]);\n\n      const getOffsetKey = (name: string) =>\n        JANUARY.tz(name).utcOffset().toString() +\n        JULY.tz(name).utcOffset().toString();\n\n      const getTimezoneName = (name: string) => {\n        const offsets = getOffsetKey(name);\n        return (\n          (currentDate.tz(name).isDST()\n            ? offsetsToName[offsets]?.[1]\n            : offsetsToName[offsets]?.[0]) || name\n        );\n      };\n\n      const ALL_ZONES = momentLib.tz\n        .countries()\n        .map(country => momentLib.tz.zonesForCountry(country, true))\n        .flat();\n\n      const TIMEZONES: import('moment-timezone').MomentZoneOffset[] = [];\n      ALL_ZONES.forEach(zone => {\n        if (\n          !TIMEZONES.find(\n            option => getOffsetKey(option.name) === getOffsetKey(zone.name),\n          )\n        ) {\n          TIMEZONES.push(zone); // dedupe zones by offsets\n        }\n      });\n\n      const TIMEZONE_OPTIONS = TIMEZONES.map(zone => ({\n        label: `GMT ${momentLib\n          .tz(currentDate, zone.name)\n          .format('Z')} (${getTimezoneName(zone.name)})`,\n        value: zone.name,\n        offsets: getOffsetKey(zone.name),\n        timezoneName: zone.name,\n      }));\n\n      const TIMEZONE_OPTIONS_SORT_COMPARATOR = (\n        a: (typeof TIMEZONE_OPTIONS)[number],\n        b: (typeof TIMEZONE_OPTIONS)[number],\n      ) =>\n        momentLib.tz(currentDate, a.timezoneName).utcOffset() -\n        momentLib.tz(currentDate, b.timezoneName).utcOffset();\n\n      // pre-sort timezone options by time offset\n      TIMEZONE_OPTIONS.sort(TIMEZONE_OPTIONS_SORT_COMPARATOR);\n\n      const matchTimezoneToOptions = (timezone: string) =>\n        TIMEZONE_OPTIONS.find(\n          option => option.offsets === getOffsetKey(timezone),\n        )?.value || DEFAULT_TIMEZONE.value;\n\n      const validTimezone = matchTimezoneToOptions(\n        timezone || momentLib.tz.guess(),\n      );\n\n      return {\n        TIMEZONE_OPTIONS,\n        TIMEZONE_OPTIONS_SORT_COMPARATOR,\n        validTimezone,\n      };\n    }, [momentLib, timezone]);\n\n  // force trigger a timezone update if provided `timezone` is not invalid\n  useEffect(() => {\n    if (validTimezone && timezone !== validTimezone) {\n      onTimezoneChange(validTimezone);\n    }\n  }, [validTimezone, onTimezoneChange, timezone]);\n\n  if (!TIMEZONE_OPTIONS || !TIMEZONE_OPTIONS_SORT_COMPARATOR) {\n    return <Loading position=\"inline-centered\" />;\n  }\n\n  return (\n    <Select\n      ariaLabel={t('Timezone selector')}\n      css={{ minWidth }}\n      onChange={tz => onTimezoneChange(tz as string)}\n      value={validTimezone}\n      options={TIMEZONE_OPTIONS}\n      sortComparator={TIMEZONE_OPTIONS_SORT_COMPARATOR}\n    />\n  );\n}\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useState, ChangeEvent } from 'react';\n\ninterface NumberInputProps {\n  timeUnit: string;\n  min: number;\n  name: string;\n  value: string | number;\n  placeholder: string;\n  onChange: (event: ChangeEvent<HTMLInputElement>) => void;\n}\n\nexport default function NumberInput({\n  timeUnit,\n  min,\n  name,\n  value,\n  placeholder,\n  onChange,\n}: NumberInputProps) {\n  const [isFocused, setIsFocused] = useState<boolean>(false);\n\n  return (\n    <input\n      type=\"text\"\n      min={min}\n      name={name}\n      value={value ? `${value}${!isFocused ? ` ${timeUnit}` : ''}` : ''}\n      placeholder={placeholder}\n      onFocus={() => setIsFocused(true)}\n      onBlur={() => setIsFocused(false)}\n      onChange={onChange}\n    />\n  );\n}\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useState, useCallback, useRef, FocusEvent, FC } from 'react';\n\nimport { t, useTheme } from '@superset-ui/core';\n\nimport { AntdInput, Select } from 'src/components';\nimport { Input } from 'src/components/Input';\nimport { CronPicker, CronError } from 'src/components/CronPicker';\nimport { StyledInputContainer } from '../AlertReportModal';\n\nexport interface AlertReportCronSchedulerProps {\n  value: string;\n  onChange: (change: string) => any;\n}\n\nenum ScheduleType {\n  Picker = 'picker',\n  Input = 'input',\n}\n\nconst SCHEDULE_TYPE_OPTIONS = [\n  {\n    label: t('Recurring (every)'),\n    value: ScheduleType.Picker,\n  },\n  {\n    label: t('CRON Schedule'),\n    value: ScheduleType.Input,\n  },\n];\n\nexport const AlertReportCronScheduler: FC<AlertReportCronSchedulerProps> = ({\n  value,\n  onChange,\n}) => {\n  const theme = useTheme();\n  const inputRef = useRef<AntdInput>(null);\n  const [scheduleFormat, setScheduleFormat] = useState<ScheduleType>(\n    ScheduleType.Picker,\n  );\n\n  const customSetValue = useCallback(\n    (newValue: string) => {\n      onChange(newValue);\n      inputRef.current?.setValue(newValue);\n    },\n    [inputRef, onChange],\n  );\n\n  const handleBlur = useCallback(\n    (event: FocusEvent<HTMLInputElement>) => {\n      onChange(event.target.value);\n    },\n    [onChange],\n  );\n\n  const handlePressEnter = useCallback(() => {\n    onChange(inputRef.current?.input.value || '');\n  }, [onChange]);\n\n  const [error, onError] = useState<CronError>();\n\n  return (\n    <>\n      <StyledInputContainer>\n        <div className=\"control-label\">\n          {t('Schedule type')}\n          <span className=\"required\">*</span>\n        </div>\n        <div className=\"input-container\">\n          <Select\n            ariaLabel={t('Schedule type')}\n            placeholder={t('Schedule type')}\n            onChange={(e: ScheduleType) => {\n              setScheduleFormat(e);\n            }}\n            value={scheduleFormat}\n            options={SCHEDULE_TYPE_OPTIONS}\n          />\n        </div>\n      </StyledInputContainer>\n\n      <StyledInputContainer data-test=\"input-content\" className=\"styled-input\">\n        <div className=\"control-label\">\n          {t('Schedule')}\n          <span className=\"required\">*</span>\n        </div>\n        {scheduleFormat === ScheduleType.Input && (\n          <Input\n            type=\"text\"\n            name=\"crontab\"\n            ref={inputRef}\n            style={error ? { borderColor: theme.colors.error.base } : {}}\n            placeholder={t('CRON expression')}\n            value={value}\n            onBlur={handleBlur}\n            onChange={e => customSetValue(e.target.value)}\n            onPressEnter={handlePressEnter}\n          />\n        )}\n        {scheduleFormat === ScheduleType.Picker && (\n          <CronPicker\n            clearButton={false}\n            value={value}\n            setValue={customSetValue}\n            displayError={scheduleFormat === ScheduleType.Picker}\n            onError={onError}\n          />\n        )}\n      </StyledInputContainer>\n    </>\n  );\n};\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  FunctionComponent,\n  useState,\n  ChangeEvent,\n  useEffect,\n  useMemo,\n} from 'react';\nimport rison from 'rison';\n\nimport {\n  FeatureFlag,\n  JsonResponse,\n  SupersetClient,\n  isFeatureEnabled,\n  styled,\n  t,\n  useTheme,\n} from '@superset-ui/core';\nimport { Select } from 'src/components';\nimport Icons from 'src/components/Icons';\nimport {\n  NotificationMethodOption,\n  NotificationSetting,\n  SlackChannel,\n} from '../types';\nimport { StyledInputContainer } from '../AlertReportModal';\n\nconst StyledNotificationMethod = styled.div`\n  ${({ theme }) => `\n    margin-bottom: ${theme.gridUnit * 3}px;\n\n    .input-container {\n      textarea {\n        height: auto;\n      }\n\n      &.error {\n        input {\n          border-color: ${theme.colors.error.base};\n        }\n      }\n\n      .helper {\n        margin-top: ${theme.gridUnit * 2}px;\n        font-size: ${theme.typography.sizes.s}px;\n        color: ${theme.colors.grayscale.base};\n      }\n    }\n\n    .inline-container {\n      margin-bottom: ${theme.gridUnit * 2}px;\n\n      > div {\n        margin: 0px;\n      }\n\n      .delete-button {\n        margin-left: ${theme.gridUnit * 2}px;\n        padding-top: ${theme.gridUnit}px;\n      }\n    }\n\n    .ghost-button {\n      color: ${theme.colors.primary.dark1};\n      display: inline-flex;\n      align-items: center;\n      font-size: ${theme.typography.sizes.s}px;\n      cursor: pointer;\n      margin-top: ${theme.gridUnit}px;\n\n      .icon {\n        width: ${theme.gridUnit * 3}px;\n        height: ${theme.gridUnit * 3}px;\n        font-size: ${theme.typography.sizes.s}px;\n        margin-right: ${theme.gridUnit}px;\n      }\n    }\n\n    .ghost-button + .ghost-button {\n      margin-left: ${theme.gridUnit * 4}px;\n    }\n\n    .ghost-button:first-child[style*='none'] + .ghost-button {\n      margin-left: 0px; /* Remove margin when the first button is hidden */\n    }\n  `}\n`;\n\nconst TRANSLATIONS = {\n  EMAIL_CC_NAME: t('CC recipients'),\n  EMAIL_BCC_NAME: t('BCC recipients'),\n  EMAIL_SUBJECT_NAME: t('Email subject name (optional)'),\n  EMAIL_SUBJECT_ERROR_TEXT: t(\n    'Please enter valid text. Spaces alone are not permitted.',\n  ),\n};\n\ninterface NotificationMethodProps {\n  setting?: NotificationSetting | null;\n  index: number;\n  onUpdate?: (index: number, updatedSetting: NotificationSetting) => void;\n  onRemove?: (index: number) => void;\n  onInputChange?: (\n    event: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>,\n  ) => void;\n  email_subject: string;\n  defaultSubject: string;\n  setErrorSubject: (hasError: boolean) => void;\n}\n\nexport const mapSlackValues = ({\n  method,\n  recipientValue,\n  slackOptions,\n}: {\n  method: string;\n  recipientValue: string;\n  slackOptions: { label: string; value: string }[];\n}) => {\n  const prop = method === NotificationMethodOption.SlackV2 ? 'value' : 'label';\n  return recipientValue\n    .split(',')\n    .map(recipient =>\n      slackOptions.find(\n        option =>\n          option[prop].trim().toLowerCase() === recipient.trim().toLowerCase(),\n      ),\n    )\n    .filter(val => !!val) as { label: string; value: string }[];\n};\n\nexport const mapChannelsToOptions = (result: SlackChannel[]) => {\n  const publicChannels: SlackChannel[] = [];\n  const privateChannels: SlackChannel[] = [];\n\n  result.forEach(channel => {\n    if (channel.is_private) {\n      privateChannels.push(channel);\n    } else {\n      publicChannels.push(channel);\n    }\n  });\n\n  return [\n    {\n      label: 'Public Channels',\n      options: publicChannels.map((channel: SlackChannel) => ({\n        label: `${channel.name} ${\n          channel.is_member ? '' : t('(Bot not in channel)')\n        }`,\n        value: channel.id,\n        key: channel.id,\n      })),\n      key: 'public',\n    },\n    {\n      label: t('Private Channels (Bot in channel)'),\n      options: privateChannels.map((channel: SlackChannel) => ({\n        label: channel.name,\n        value: channel.id,\n        key: channel.id,\n      })),\n      key: 'private',\n    },\n  ];\n};\n\ntype SlackOptionsType = {\n  label: string;\n  options: { label: string; value: string }[];\n}[];\n\nexport const NotificationMethod: FunctionComponent<NotificationMethodProps> = ({\n  setting = null,\n  index,\n  onUpdate,\n  onRemove,\n  onInputChange,\n  email_subject,\n  defaultSubject,\n  setErrorSubject,\n}) => {\n  const { method, recipients, cc, bcc, options } = setting || {};\n  const [recipientValue, setRecipientValue] = useState<string>(\n    recipients || '',\n  );\n  const [slackRecipients, setSlackRecipients] = useState<\n    { label: string; value: string }[]\n  >([]);\n  const [error, setError] = useState(false);\n  const [ccVisible, setCcVisible] = useState<boolean>(!!cc);\n  const [bccVisible, setBccVisible] = useState<boolean>(!!bcc);\n  const [ccValue, setCcValue] = useState<string>(cc || '');\n  const [bccValue, setBccValue] = useState<string>(bcc || '');\n  const theme = useTheme();\n  const [methodOptionsLoading, setMethodOptionsLoading] =\n    useState<boolean>(true);\n  const [slackOptions, setSlackOptions] = useState<SlackOptionsType>([\n    {\n      label: '',\n      options: [],\n    },\n  ]);\n\n  const [useSlackV1, setUseSlackV1] = useState<boolean>(false);\n\n  const onMethodChange = (selected: {\n    label: string;\n    value: NotificationMethodOption;\n  }) => {\n    // Since we're swapping the method, reset the recipients\n    setRecipientValue('');\n    setCcValue('');\n    setBccValue('');\n\n    if (onUpdate && setting) {\n      const updatedSetting = {\n        ...setting,\n        method: selected.value,\n        recipients: '',\n        cc: '',\n        bcc: '',\n      };\n\n      onUpdate(index, updatedSetting);\n    }\n  };\n\n  const fetchSlackChannels = async ({\n    searchString = '',\n    types = [],\n    exactMatch = false,\n  }: {\n    searchString?: string | undefined;\n    types?: string[];\n    exactMatch?: boolean | undefined;\n  } = {}): Promise<JsonResponse> => {\n    const queryString = rison.encode({ searchString, types, exactMatch });\n    const endpoint = `/api/v1/report/slack_channels/?q=${queryString}`;\n    return SupersetClient.get({ endpoint });\n  };\n\n  useEffect(() => {\n    const slackEnabled = options?.some(\n      option =>\n        option === NotificationMethodOption.Slack ||\n        option === NotificationMethodOption.SlackV2,\n    );\n    if (slackEnabled && !slackOptions[0]?.options.length) {\n      fetchSlackChannels({ types: ['public_channel', 'private_channel'] })\n        .then(({ json }) => {\n          const { result } = json;\n          const options: SlackOptionsType = mapChannelsToOptions(result);\n\n          setSlackOptions(options);\n\n          if (isFeatureEnabled(FeatureFlag.AlertReportSlackV2)) {\n            // for edit mode, map existing ids to names for display if slack v2\n            // or names to ids if slack v1\n            const [publicOptions, privateOptions] = options;\n            if (\n              method &&\n              [\n                NotificationMethodOption.SlackV2,\n                NotificationMethodOption.Slack,\n              ].includes(method)\n            ) {\n              setSlackRecipients(\n                mapSlackValues({\n                  method,\n                  recipientValue,\n                  slackOptions: [\n                    ...publicOptions.options,\n                    ...privateOptions.options,\n                  ],\n                }),\n              );\n            }\n          }\n        })\n        .catch(e => {\n          // Fallback to slack v1 if slack v2 is not compatible\n          setUseSlackV1(true);\n        })\n        .finally(() => {\n          setMethodOptionsLoading(false);\n        });\n    }\n  }, []);\n\n  const methodOptions = useMemo(\n    () =>\n      (options || [])\n        .filter(\n          method =>\n            (isFeatureEnabled(FeatureFlag.AlertReportSlackV2) &&\n              !useSlackV1 &&\n              method === NotificationMethodOption.SlackV2) ||\n            ((!isFeatureEnabled(FeatureFlag.AlertReportSlackV2) ||\n              useSlackV1) &&\n              method === NotificationMethodOption.Slack) ||\n            method === NotificationMethodOption.Email,\n        )\n        .map(method => ({\n          label:\n            method === NotificationMethodOption.SlackV2\n              ? NotificationMethodOption.Slack\n              : method,\n          value: method,\n        })),\n    [options, useSlackV1],\n  );\n\n  if (!setting) {\n    return null;\n  }\n\n  const onRecipientsChange = (event: ChangeEvent<HTMLTextAreaElement>) => {\n    const { target } = event;\n\n    setRecipientValue(target.value);\n\n    if (onUpdate) {\n      const updatedSetting = {\n        ...setting,\n        recipients: target.value,\n      };\n\n      onUpdate(index, updatedSetting);\n    }\n  };\n\n  const onSlackRecipientsChange = (\n    recipients: { label: string; value: string }[],\n  ) => {\n    setSlackRecipients(recipients);\n\n    if (onUpdate) {\n      const updatedSetting = {\n        ...setting,\n        recipients: recipients?.map(obj => obj.value).join(','),\n      };\n\n      onUpdate(index, updatedSetting);\n    }\n  };\n\n  const onSubjectChange = (\n    event: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>,\n  ) => {\n    const { value } = event.target;\n\n    if (onInputChange) {\n      onInputChange(event);\n    }\n\n    const hasError = value.length > 0 && value.trim().length === 0;\n    setError(hasError);\n    if (setErrorSubject) {\n      setErrorSubject(hasError);\n    }\n  };\n\n  const onCcChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const { target } = event;\n\n    setCcValue(target.value);\n\n    if (onUpdate) {\n      const updatedSetting = {\n        ...setting,\n        cc: target.value,\n      };\n\n      onUpdate(index, updatedSetting);\n    }\n  };\n\n  const onBccChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const { target } = event;\n\n    setBccValue(target.value);\n\n    if (onUpdate) {\n      const updatedSetting = {\n        ...setting,\n        bcc: target.value,\n      };\n\n      onUpdate(index, updatedSetting);\n    }\n  };\n\n  // Set recipients\n  if (!!recipients && recipientValue !== recipients) {\n    setRecipientValue(recipients);\n  }\n\n  if (!!cc && ccValue !== cc) {\n    setCcValue(cc);\n  }\n\n  if (!!bcc && bccValue !== bcc) {\n    setBccValue(bcc);\n  }\n\n  return (\n    <StyledNotificationMethod>\n      <div className=\"inline-container\">\n        <StyledInputContainer>\n          <div className=\"control-label\">{t('Notification Method')}</div>\n          <div className=\"input-container\">\n            <Select\n              ariaLabel={t('Delivery method')}\n              data-test=\"select-delivery-method\"\n              labelInValue\n              onChange={onMethodChange}\n              placeholder={t('Select Delivery Method')}\n              options={methodOptions}\n              showSearch\n              value={methodOptions.find(option => option.value === method)}\n              loading={methodOptionsLoading}\n            />\n            {index !== 0 && !!onRemove ? (\n              // eslint-disable-next-line jsx-a11y/control-has-associated-label\n              <span\n                role=\"button\"\n                tabIndex={0}\n                className=\"delete-button\"\n                onClick={() => onRemove(index)}\n              >\n                <Icons.Trash iconColor={theme.colors.grayscale.base} />\n              </span>\n            ) : null}\n          </div>\n        </StyledInputContainer>\n      </div>\n      {method !== undefined ? (\n        <>\n          <div className=\"inline-container\">\n            <StyledInputContainer>\n              {method === NotificationMethodOption.Email ? (\n                <>\n                  <div className=\"control-label\">\n                    {TRANSLATIONS.EMAIL_SUBJECT_NAME}\n                  </div>\n                  <div className={`input-container ${error ? 'error' : ''}`}>\n                    <input\n                      type=\"text\"\n                      name=\"email_subject\"\n                      value={email_subject}\n                      placeholder={defaultSubject}\n                      onChange={onSubjectChange}\n                    />\n                  </div>\n                  {error && (\n                    <div\n                      style={{\n                        color: theme.colors.error.base,\n                        fontSize: theme.gridUnit * 3,\n                      }}\n                    >\n                      {TRANSLATIONS.EMAIL_SUBJECT_ERROR_TEXT}\n                    </div>\n                  )}\n                </>\n              ) : null}\n            </StyledInputContainer>\n          </div>\n          <div className=\"inline-container\">\n            <StyledInputContainer>\n              <div className=\"control-label\">\n                {t(\n                  '%s recipients',\n                  method === NotificationMethodOption.SlackV2\n                    ? NotificationMethodOption.Slack\n                    : method,\n                )}\n                <span className=\"required\">*</span>\n              </div>\n              <div>\n                {[\n                  NotificationMethodOption.Email,\n                  NotificationMethodOption.Slack,\n                ].includes(method) ? (\n                  <>\n                    <div className=\"input-container\">\n                      <textarea\n                        name=\"To\"\n                        data-test=\"recipients\"\n                        value={recipientValue}\n                        onChange={onRecipientsChange}\n                      />\n                    </div>\n                    <div className=\"input-container\">\n                      <div className=\"helper\">\n                        {t('Recipients are separated by \",\" or \";\"')}\n                      </div>\n                    </div>\n                  </>\n                ) : (\n                  // for SlackV2\n                  <Select\n                    ariaLabel={t('Select channels')}\n                    mode=\"multiple\"\n                    name=\"recipients\"\n                    value={slackRecipients}\n                    options={slackOptions}\n                    onChange={onSlackRecipientsChange}\n                    allowClear\n                    data-test=\"recipients\"\n                    allowSelectAll={false}\n                    labelInValue\n                  />\n                )}\n              </div>\n            </StyledInputContainer>\n          </div>\n          {method === NotificationMethodOption.Email && (\n            <StyledInputContainer>\n              {/* Render \"CC\" input field if ccVisible is true */}\n              {ccVisible && (\n                <>\n                  <div className=\"control-label\">\n                    {TRANSLATIONS.EMAIL_CC_NAME}\n                  </div>\n                  <div className=\"input-container\">\n                    <textarea\n                      name=\"CC\"\n                      data-test=\"cc\"\n                      value={ccValue}\n                      onChange={onCcChange}\n                    />\n                  </div>\n                  <div className=\"input-container\">\n                    <div className=\"helper\">\n                      {t('Recipients are separated by \",\" or \";\"')}\n                    </div>\n                  </div>\n                </>\n              )}\n              {/* Render \"BCC\" input field if bccVisible is true */}\n              {bccVisible && (\n                <>\n                  <div className=\"control-label\">\n                    {TRANSLATIONS.EMAIL_BCC_NAME}\n                  </div>\n                  <div className=\"input-container\">\n                    <textarea\n                      name=\"BCC\"\n                      data-test=\"bcc\"\n                      value={bccValue}\n                      onChange={onBccChange}\n                    />\n                  </div>\n                  <div className=\"input-container\">\n                    <div className=\"helper\">\n                      {t('Recipients are separated by \",\" or \";\"')}\n                    </div>\n                  </div>\n                </>\n              )}\n              {/* New buttons container */}\n              <div className=\"ghost-button\">\n                <span\n                  className=\"ghost-button\"\n                  role=\"button\"\n                  tabIndex={0}\n                  onClick={() => setCcVisible(true)}\n                  style={{ display: ccVisible ? 'none' : 'inline-flex' }}\n                >\n                  <Icons.Email className=\"icon\" />\n                  {t('Add CC Recipients')}\n                </span>\n                <span\n                  className=\"ghost-button\"\n                  role=\"button\"\n                  tabIndex={0}\n                  onClick={() => setBccVisible(true)}\n                  style={{ display: bccVisible ? 'none' : 'inline-flex' }}\n                >\n                  <Icons.Email className=\"icon\" />\n                  {t('Add BCC Recipients')}\n                </span>\n              </div>\n            </StyledInputContainer>\n          )}\n        </>\n      ) : null}\n    </StyledNotificationMethod>\n  );\n};\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t } from '@superset-ui/core';\nimport { CheckCircleOutlined } from '@ant-design/icons';\n\nconst ValidatedPanelHeader = ({\n  title,\n  subtitle,\n  validateCheckStatus,\n  testId,\n}: {\n  title: string;\n  subtitle: string;\n  validateCheckStatus: boolean;\n  testId?: string;\n}): JSX.Element => {\n  const checkmark = <CheckCircleOutlined />;\n\n  return (\n    <div className=\"collapse-panel-header\">\n      <div className=\"collapse-panel-title\" data-test={testId}>\n        <span>{t(title)}</span>\n        {validateCheckStatus ? (\n          <span className=\"validation-checkmark\">{checkmark}</span>\n        ) : (\n          <span className=\"collapse-panel-asterisk\">{' *'}</span>\n        )}\n      </div>\n      <p className=\"collapse-panel-subtitle\">\n        {subtitle ? t(subtitle) : undefined}\n      </p>\n    </div>\n  );\n};\n\nexport default ValidatedPanelHeader;\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { ReactNode } from 'react';\nimport { css, SupersetTheme } from '@superset-ui/core';\nimport { Collapse as AntdCollapse } from 'antd';\nimport { CollapsePanelProps } from 'antd/lib/collapse';\n\nconst anticonHeight = 12;\nconst antdPanelStyles = (theme: SupersetTheme) => css`\n  .ant-collapse-header {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: flex-start;\n    padding: 0px ${theme.gridUnit * 4}px;\n\n    .anticon.anticon-right.ant-collapse-arrow {\n      padding: 0;\n      top: calc(50% - ${anticonHeight / 2}px);\n    }\n\n    .collapse-panel-title {\n      font-size: ${theme.gridUnit * 4}px;\n      font-weight: ${theme.typography.weights.bold};\n      line-height: 130%;\n    }\n\n    .collapse-panel-subtitle {\n      color: ${theme.colors.grayscale.base};\n      font-size: ${theme.typography.sizes.s}px;\n      font-weight: ${theme.typography.weights.normal};\n      line-height: 150%;\n      margin-bottom: 0;\n      padding-top: ${theme.gridUnit}px;\n    }\n\n    .collapse-panel-asterisk {\n      color: var(--semantic-error-base, ${theme.colors.warning.dark1});\n    }\n    .validation-checkmark {\n      width: ${theme.gridUnit * 4}px;\n      height: ${theme.gridUnit * 4}px;\n      margin-left: ${theme.gridUnit}px;\n      color: ${theme.colors.success.base};\n    }\n  }\n`;\n\nexport interface PanelProps extends CollapsePanelProps {\n  children?: ReactNode;\n}\nconst StyledPanel = (props: PanelProps) => (\n  <AntdCollapse.Panel\n    css={(theme: SupersetTheme) => antdPanelStyles(theme)}\n    {...props}\n  />\n);\n\nexport default StyledPanel;\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { styled } from '@superset-ui/core';\nimport { ValidationObject } from './types';\nimport { TRANSLATIONS } from './AlertReportModal';\n\nconst StyledList = styled.ul`\n  margin-left: ${({ theme }) => theme.gridUnit * 2}px;\n  padding-inline-start: ${({ theme }) => theme.gridUnit * 3}px;\n`;\n\nexport const buildErrorTooltipMessage = (\n  validationStatus: ValidationObject,\n) => {\n  const sectionErrors: string[] = [];\n  Object.values(validationStatus).forEach(section => {\n    if (section.hasErrors) {\n      const sectionTitle = `${section.name}: `;\n      sectionErrors.push(sectionTitle + section.errors.join(', '));\n    }\n  });\n  return (\n    <div>\n      {TRANSLATIONS.ERROR_TOOLTIP_MESSAGE}\n      <StyledList>\n        {sectionErrors.map(err => (\n          <li key={err}>{err}</li>\n        ))}\n      </StyledList>\n    </div>\n  );\n};\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  ChangeEvent,\n  FunctionComponent,\n  useState,\n  useEffect,\n  useMemo,\n  useCallback,\n  ReactNode,\n} from 'react';\n\nimport {\n  css,\n  isFeatureEnabled,\n  FeatureFlag,\n  styled,\n  SupersetClient,\n  SupersetTheme,\n  t,\n} from '@superset-ui/core';\nimport rison from 'rison';\nimport { useSingleViewResource } from 'src/views/CRUD/hooks';\n\nimport { InputNumber } from 'src/components/Input';\nimport { Switch } from 'src/components/Switch';\nimport Modal from 'src/components/Modal';\nimport Collapse from 'src/components/Collapse';\nimport TimezoneSelector from 'src/components/TimezoneSelector';\nimport { propertyComparator } from 'src/components/Select/utils';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport Owner from 'src/types/Owner';\nimport { AntdCheckbox, AsyncSelect, Select, TreeSelect } from 'src/components';\nimport TextAreaControl from 'src/explore/components/controls/TextAreaControl';\nimport { useCommonConf } from 'src/features/databases/state';\nimport { InfoTooltipWithTrigger } from '@superset-ui/chart-controls';\nimport {\n  NotificationMethodOption,\n  NotificationSetting,\n  AlertObject,\n  ChartObject,\n  DashboardObject,\n  DatabaseObject,\n  Extra,\n  MetaObject,\n  Operator,\n  Recipient,\n  AlertsReportsConfig,\n  ValidationObject,\n  Sections,\n  TabNode,\n  SelectValue,\n  ContentType,\n} from 'src/features/alerts/types';\nimport { useSelector } from 'react-redux';\nimport { UserWithPermissionsAndRoles } from 'src/types/bootstrapTypes';\nimport NumberInput from './components/NumberInput';\nimport { AlertReportCronScheduler } from './components/AlertReportCronScheduler';\nimport { NotificationMethod } from './components/NotificationMethod';\nimport ValidatedPanelHeader from './components/ValidatedPanelHeader';\nimport StyledPanel from './components/StyledPanel';\nimport { buildErrorTooltipMessage } from './buildErrorTooltipMessage';\n\nconst TIMEOUT_MIN = 1;\nconst TEXT_BASED_VISUALIZATION_TYPES = [\n  'pivot_table_v2',\n  'table',\n  'paired_ttest',\n];\n\nexport interface AlertReportModalProps {\n  addSuccessToast: (msg: string) => void;\n  addDangerToast: (msg: string) => void;\n  alert?: AlertObject | null;\n  isReport?: boolean;\n  onAdd?: (alert?: AlertObject) => void;\n  onHide: () => void;\n  show: boolean;\n}\n\nconst DEFAULT_WORKING_TIMEOUT = 3600;\nconst DEFAULT_CRON_VALUE = '0 0 * * *'; // every day\nconst DEFAULT_RETENTION = 90;\nconst EMAIL_REGEX = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n\nconst DEFAULT_NOTIFICATION_METHODS: NotificationMethodOption[] = [\n  NotificationMethodOption.Email,\n];\nconst DEFAULT_NOTIFICATION_FORMAT = 'PNG';\nconst DEFAULT_EXTRA_DASHBOARD_OPTIONS: Extra = {\n  dashboard: {\n    anchor: '',\n  },\n};\n\nconst CONDITIONS = [\n  {\n    label: t('< (Smaller than)'),\n    value: '<',\n  },\n  {\n    label: t('> (Larger than)'),\n    value: '>',\n  },\n  {\n    label: t('<= (Smaller or equal)'),\n    value: '<=',\n  },\n  {\n    label: t('>= (Larger or equal)'),\n    value: '>=',\n  },\n  {\n    label: t('== (Is equal)'),\n    value: '==',\n  },\n  {\n    label: t('!= (Is not equal)'),\n    value: '!=',\n  },\n  {\n    label: t('Not null'),\n    value: 'not null',\n  },\n];\n\nconst RETENTION_OPTIONS = [\n  {\n    label: t('None'),\n    value: 0,\n  },\n  {\n    label: t('30 days'),\n    value: 30,\n  },\n  {\n    label: t('60 days'),\n    value: 60,\n  },\n  {\n    label: t('90 days'),\n    value: 90,\n  },\n];\n\nconst CONTENT_TYPE_OPTIONS = [\n  {\n    label: t('Dashboard'),\n    value: 'dashboard',\n  },\n  {\n    label: t('Chart'),\n    value: 'chart',\n  },\n];\nconst FORMAT_OPTIONS = {\n  pdf: {\n    label: t('Send as PDF'),\n    value: 'PDF',\n  },\n  png: {\n    label: t('Send as PNG'),\n    value: 'PNG',\n  },\n  csv: {\n    label: t('Send as CSV'),\n    value: 'CSV',\n  },\n  txt: {\n    label: t('Send as text'),\n    value: 'TEXT',\n  },\n};\n\n// Apply to final text input components of each collapse panel\nconst noMarginBottom = css`\n  margin-bottom: 0;\n`;\n\n/*\nHeight of modal body defined here, total width defined at component invocation as antd prop.\n */\nconst StyledModal = styled(Modal)`\n  .ant-modal-body {\n    height: 720px;\n  }\n\n  .control-label {\n    margin-top: ${({ theme }) => theme.gridUnit}px;\n  }\n\n  .ant-collapse > .ant-collapse-item {\n    border-bottom: none;\n  }\n\n  .inline-container {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    &.wrap {\n      flex-wrap: wrap;\n    }\n\n    > div {\n      flex: 1 1 auto;\n    }\n  }\n`;\n\nconst StyledTreeSelect = styled(TreeSelect)`\n  width: 100%;\n`;\n\nconst StyledSwitchContainer = styled.div`\n  display: flex;\n  align-items: center;\n  margin-top: 10px;\n\n  .switch-label {\n    margin-left: 10px;\n  }\n`;\n\nexport const StyledInputContainer = styled.div`\n  ${({ theme }) => css`\n    flex: 1;\n    margin-top: 0px;\n    margin-bottom: ${theme.gridUnit * 4}px;\n\n    input::-webkit-outer-spin-button,\n    input::-webkit-inner-spin-button {\n      -webkit-appearance: none;\n      margin: 0;\n    }\n    input[type='number'] {\n      -moz-appearance: textfield;\n    }\n\n    .helper {\n      display: block;\n      color: ${theme.colors.grayscale.base};\n      font-size: ${theme.typography.sizes.s}px;\n      padding: ${theme.gridUnit}px 0;\n      text-align: left;\n    }\n\n    .required {\n      margin-left: ${theme.gridUnit / 2}px;\n      color: ${theme.colors.error.base};\n    }\n\n    .input-container {\n      display: flex;\n      align-items: center;\n\n      > div {\n        width: 100%;\n      }\n\n      label {\n        display: flex;\n        margin-right: ${theme.gridUnit * 2}px;\n      }\n\n      i {\n        margin: 0 ${theme.gridUnit}px;\n      }\n    }\n\n    input,\n    textarea {\n      flex: 1 1 auto;\n    }\n\n    input[disabled] {\n      color: ${theme.colors.grayscale.base};\n    }\n\n    textarea {\n      height: 300px;\n      resize: none;\n    }\n\n    input::placeholder,\n    textarea::placeholder {\n      color: ${theme.colors.grayscale.light1};\n    }\n\n    textarea,\n    input[type='text'],\n    input[type='number'] {\n      padding: ${theme.gridUnit}px ${theme.gridUnit * 2}px;\n      border-style: none;\n      border: 1px solid ${theme.colors.grayscale.light2};\n      border-radius: ${theme.gridUnit}px;\n\n      &[name='description'] {\n        flex: 1 1 auto;\n      }\n    }\n\n    .input-label {\n      margin-left: 10px;\n    }\n  `}\n`;\n\nconst StyledCheckbox = styled(AntdCheckbox)`\n  margin-top: ${({ theme }) => theme.gridUnit * 0}px;\n`;\n\nconst StyledTooltip = styled(InfoTooltipWithTrigger)`\n  margin-left: ${({ theme }) => theme.gridUnit}px;\n`;\n\n// Notification Method components\nconst StyledNotificationAddButton = styled.div`\n  ${({ theme }) => css`\n    color: ${theme.colors.primary.dark1};\n    cursor: pointer;\n\n    i {\n      margin-right: ${theme.gridUnit * 2}px;\n    }\n\n    &.disabled {\n      color: ${theme.colors.grayscale.light1};\n      cursor: default;\n    }\n  `}\n`;\n\nconst StyledNotificationMethodWrapper = styled.div`\n  .inline-container .input-container {\n    margin-left: 0;\n  }\n`;\n\nconst inputSpacer = (theme: SupersetTheme) => css`\n  margin-right: ${theme.gridUnit * 3}px;\n`;\n\ntype NotificationAddStatus = 'active' | 'disabled' | 'hidden';\n\ninterface NotificationMethodAddProps {\n  status: NotificationAddStatus;\n  onClick: () => void;\n}\n\nexport const TRANSLATIONS = {\n  // Panel titles\n  GENERAL_TITLE: t('General information'),\n  ALERT_CONDITION_TITLE: t('Alert condition'),\n  ALERT_CONTENTS_TITLE: t('Alert contents'),\n  REPORT_CONTENTS_TITLE: t('Report contents'),\n  SCHEDULE_TITLE: t('Schedule'),\n  NOTIFICATION_TITLE: t('Notification method'),\n  // Error text\n  NAME_ERROR_TEXT: t('name'),\n  OWNERS_ERROR_TEXT: t('owners'),\n  CONTENT_ERROR_TEXT: t('content type'),\n  DATABASE_ERROR_TEXT: t('database'),\n  SQL_ERROR_TEXT: t('sql'),\n  ALERT_CONDITION_ERROR_TEXT: t('alert condition'),\n  CRONTAB_ERROR_TEXT: t('crontab'),\n  WORKING_TIMEOUT_ERROR_TEXT: t('working timeout'),\n  RECIPIENTS_ERROR_TEXT: t('recipients'),\n  EMAIL_SUBJECT_ERROR_TEXT: t('email subject'),\n  EMAIL_VALIDATION_ERROR_TEXT: t('invalid email'),\n  ERROR_TOOLTIP_MESSAGE: t(\n    'Not all required fields are complete. Please provide the following:',\n  ),\n};\n\nconst NotificationMethodAdd: FunctionComponent<NotificationMethodAddProps> = ({\n  status = 'active',\n  onClick,\n}) => {\n  if (status === 'hidden') {\n    return null;\n  }\n\n  const checkStatus = () => {\n    if (status !== 'disabled') {\n      onClick();\n    }\n  };\n\n  return (\n    <StyledNotificationAddButton className={status} onClick={checkStatus}>\n      <i className=\"fa fa-plus\" />{' '}\n      {status === 'active'\n        ? t('Add another notification method')\n        : t('Add delivery method')}\n    </StyledNotificationAddButton>\n  );\n};\n\nconst AlertReportModal: FunctionComponent<AlertReportModalProps> = ({\n  addDangerToast,\n  onAdd,\n  onHide,\n  show,\n  alert = null,\n  isReport = false,\n  addSuccessToast,\n}) => {\n  const currentUser = useSelector<any, UserWithPermissionsAndRoles>(\n    state => state.user,\n  );\n  // Check config for alternate notification methods setting\n  const conf = useCommonConf();\n  const allowedNotificationMethods: NotificationMethodOption[] =\n    conf?.ALERT_REPORTS_NOTIFICATION_METHODS || DEFAULT_NOTIFICATION_METHODS;\n\n  const [disableSave, setDisableSave] = useState<boolean>(true);\n\n  const [currentAlert, setCurrentAlert] =\n    useState<Partial<AlertObject> | null>();\n  const [isHidden, setIsHidden] = useState<boolean>(true);\n  const [contentType, setContentType] = useState<string>('dashboard');\n  const [reportFormat, setReportFormat] = useState<string>(\n    DEFAULT_NOTIFICATION_FORMAT,\n  );\n  const [forceScreenshot, setForceScreenshot] = useState<boolean>(false);\n\n  const [isScreenshot, setIsScreenshot] = useState<boolean>(false);\n  useEffect(() => {\n    setIsScreenshot(reportFormat === 'PNG');\n  }, [reportFormat]);\n\n  // Dropdown options\n  const [conditionNotNull, setConditionNotNull] = useState<boolean>(false);\n  const [sourceOptions, setSourceOptions] = useState<MetaObject[]>([]);\n  const [dashboardOptions, setDashboardOptions] = useState<MetaObject[]>([]);\n  const [chartOptions, setChartOptions] = useState<MetaObject[]>([]);\n  const [tabOptions, setTabOptions] = useState<TabNode[]>([]);\n\n  // Validation\n  const [validationStatus, setValidationStatus] = useState<ValidationObject>({\n    [Sections.General]: {\n      hasErrors: false,\n      name: TRANSLATIONS.GENERAL_TITLE,\n      errors: [],\n    },\n    [Sections.Content]: {\n      hasErrors: false,\n      name: isReport\n        ? TRANSLATIONS.REPORT_CONTENTS_TITLE\n        : TRANSLATIONS.ALERT_CONTENTS_TITLE,\n      errors: [],\n    },\n    [Sections.Alert]: {\n      hasErrors: false,\n      name: TRANSLATIONS.ALERT_CONDITION_TITLE,\n      errors: [],\n    },\n    [Sections.Schedule]: {\n      hasErrors: false,\n      name: TRANSLATIONS.SCHEDULE_TITLE,\n      errors: [],\n    },\n    [Sections.Notification]: {\n      hasErrors: false,\n      name: TRANSLATIONS.NOTIFICATION_TITLE,\n      errors: [],\n    },\n  });\n  const [errorTooltipMessage, setErrorTooltipMessage] = useState<ReactNode>('');\n\n  const updateValidationStatus = (section: Sections, errors: string[]) => {\n    setValidationStatus(currentValidationData => ({\n      ...currentValidationData,\n      [section]: {\n        hasErrors: errors.length > 0,\n        name: currentValidationData[section].name,\n        errors,\n      },\n    }));\n  };\n\n  // Chart metadata\n  const [chartVizType, setChartVizType] = useState<string>('');\n\n  const reportOrAlert = isReport ? 'report' : 'alert';\n  const isEditMode = alert !== null;\n  const formatOptionEnabled =\n    isFeatureEnabled(FeatureFlag.AlertsAttachReports) || isReport;\n  const tabsEnabled = isFeatureEnabled(FeatureFlag.AlertReportTabs);\n\n  const [notificationAddState, setNotificationAddState] =\n    useState<NotificationAddStatus>('active');\n\n  const [notificationSettings, setNotificationSettings] = useState<\n    NotificationSetting[]\n  >([]);\n  const [emailSubject, setEmailSubject] = useState<string>('');\n  const [emailError, setEmailError] = useState(false);\n\n  const onNotificationAdd = () => {\n    setNotificationSettings([\n      ...notificationSettings,\n      {\n        recipients: '',\n        // options shown in the newly added notification method\n        options: allowedNotificationMethods.filter(\n          // are filtered such that\n          option =>\n            // options are not included\n            !notificationSettings.reduce(\n              // when it exists in previous notificationSettings\n              (accum, setting) => accum || option === setting.method,\n              false,\n            ),\n        ),\n      },\n    ]);\n\n    setNotificationAddState(\n      notificationSettings.length === allowedNotificationMethodsCount\n        ? 'hidden'\n        : 'disabled',\n    );\n  };\n\n  const {\n    ALERT_REPORTS_DEFAULT_WORKING_TIMEOUT,\n    ALERT_REPORTS_DEFAULT_CRON_VALUE,\n    ALERT_REPORTS_DEFAULT_RETENTION,\n  } = useSelector<any, AlertsReportsConfig>(state => {\n    const conf = state.common?.conf;\n    return {\n      ALERT_REPORTS_DEFAULT_WORKING_TIMEOUT:\n        conf?.ALERT_REPORTS_DEFAULT_WORKING_TIMEOUT ?? DEFAULT_WORKING_TIMEOUT,\n      ALERT_REPORTS_DEFAULT_CRON_VALUE:\n        conf?.ALERT_REPORTS_DEFAULT_CRON_VALUE ?? DEFAULT_CRON_VALUE,\n      ALERT_REPORTS_DEFAULT_RETENTION:\n        conf?.ALERT_REPORTS_DEFAULT_RETENTION ?? DEFAULT_RETENTION,\n    };\n  });\n\n  const defaultAlert = {\n    active: true,\n    creation_method: 'alerts_reports',\n    crontab: ALERT_REPORTS_DEFAULT_CRON_VALUE,\n    extra: DEFAULT_EXTRA_DASHBOARD_OPTIONS,\n    log_retention: ALERT_REPORTS_DEFAULT_RETENTION,\n    working_timeout: ALERT_REPORTS_DEFAULT_WORKING_TIMEOUT,\n    name: '',\n    owners: [],\n    recipients: [],\n    sql: '',\n    email_subject: '',\n    validator_config_json: {},\n    validator_type: '',\n    force_screenshot: false,\n    grace_period: undefined,\n  };\n\n  const updateNotificationSetting = (\n    index: number,\n    setting: NotificationSetting,\n  ) => {\n    const settings: NotificationSetting[] = [...notificationSettings];\n    settings[index] = setting;\n\n    // if you've changed notification method -> remove trailing methods\n    if (notificationSettings[index].method !== setting.method) {\n      notificationSettings[index] = setting;\n\n      setNotificationSettings(\n        notificationSettings.filter((_, idx) => idx <= index),\n      );\n\n      if (notificationSettings.length - 1 > index) {\n        setNotificationAddState('active');\n      }\n\n      if (setting.method !== undefined && notificationAddState !== 'hidden') {\n        setNotificationAddState('active');\n      }\n    } else {\n      setNotificationSettings(settings);\n    }\n  };\n\n  const removeNotificationSetting = (index: number) => {\n    const settings = notificationSettings.slice();\n\n    settings.splice(index, 1);\n    setNotificationSettings(settings);\n    setNotificationAddState('active');\n  };\n\n  const updateAnchorState = (value: any) => {\n    setCurrentAlert(currentAlertData => {\n      const dashboardState = currentAlertData?.extra?.dashboard;\n      const extra = {\n        dashboard: {\n          ...dashboardState,\n          anchor: value,\n        },\n      };\n      return {\n        ...currentAlertData,\n        extra,\n      };\n    });\n  };\n\n  // Alert fetch logic\n  const {\n    state: { loading, resource, error: fetchError },\n    fetchResource,\n    createResource,\n    updateResource,\n    clearError,\n  } = useSingleViewResource<AlertObject>('report', t('report'), addDangerToast);\n\n  // Functions\n  const hide = () => {\n    clearError();\n    setIsHidden(true);\n    onHide();\n    setNotificationSettings([]);\n    setCurrentAlert({ ...defaultAlert });\n    setNotificationAddState('active');\n  };\n\n  const onSave = () => {\n    // Notification Settings\n    const recipients: Recipient[] = [];\n\n    notificationSettings.forEach(setting => {\n      if (setting.method && setting.recipients.length) {\n        recipients.push({\n          recipient_config_json: {\n            target: setting.recipients,\n            ccTarget: setting.cc,\n            bccTarget: setting.bcc,\n          },\n          type: setting.method,\n        });\n      }\n    });\n\n    const shouldEnableForceScreenshot =\n      contentType === ContentType.Chart && !isReport;\n    const data: any = {\n      ...currentAlert,\n      type: isReport ? 'Report' : 'Alert',\n      force_screenshot: shouldEnableForceScreenshot || forceScreenshot,\n      validator_type: conditionNotNull ? 'not null' : 'operator',\n      validator_config_json: conditionNotNull\n        ? {}\n        : currentAlert?.validator_config_json,\n      chart:\n        contentType === ContentType.Chart ? currentAlert?.chart?.value : null,\n      dashboard:\n        contentType === ContentType.Dashboard\n          ? currentAlert?.dashboard?.value\n          : null,\n      custom_width: isScreenshot ? currentAlert?.custom_width : undefined,\n      database: currentAlert?.database?.value,\n      owners: (currentAlert?.owners || []).map(\n        owner => (owner as MetaObject).value || owner.id,\n      ),\n      recipients,\n      report_format: reportFormat || DEFAULT_NOTIFICATION_FORMAT,\n      extra: contentType === ContentType.Dashboard ? currentAlert?.extra : {},\n    };\n\n    if (data.recipients && !data.recipients.length) {\n      delete data.recipients;\n    }\n\n    data.context_markdown = 'string';\n    if (isEditMode) {\n      // Edit\n      if (currentAlert?.id) {\n        const update_id = currentAlert.id;\n\n        delete data.id;\n        delete data.created_by;\n        delete data.last_eval_dttm;\n        delete data.last_state;\n        delete data.last_value;\n        delete data.last_value_row_json;\n\n        updateResource(update_id, data).then(response => {\n          if (!response) {\n            return;\n          }\n\n          addSuccessToast(t('%s updated', data.type));\n\n          if (onAdd) {\n            onAdd();\n          }\n\n          hide();\n        });\n      }\n    } else if (currentAlert) {\n      // Create\n      createResource(data).then(response => {\n        if (!response) {\n          return;\n        }\n\n        addSuccessToast(t('%s updated', data.type));\n\n        if (onAdd) {\n          onAdd(response);\n        }\n\n        hide();\n      });\n    }\n  };\n\n  // Fetch data to populate form dropdowns\n  const loadOwnerOptions = useMemo(\n    () =>\n      (input = '', page: number, pageSize: number) => {\n        const query = rison.encode({\n          filter: input,\n          page,\n          page_size: pageSize,\n        });\n        return SupersetClient.get({\n          endpoint: `/api/v1/report/related/created_by?q=${query}`,\n        }).then(response => ({\n          data: response.json.result.map(\n            (item: { value: number; text: string }) => ({\n              value: item.value,\n              label: item.text,\n            }),\n          ),\n          totalCount: response.json.count,\n        }));\n      },\n    [],\n  );\n\n  const getSourceData = useCallback(\n    (db?: MetaObject) => {\n      const database = db || currentAlert?.database;\n\n      if (!database || database.label) {\n        return null;\n      }\n\n      let result;\n\n      // Cycle through source options to find the selected option\n      sourceOptions.forEach(source => {\n        if (source.value === database.value || source.value === database.id) {\n          result = source;\n        }\n      });\n\n      return result;\n    },\n    [currentAlert?.database, sourceOptions],\n  );\n\n  // Updating alert/report state\n  const updateAlertState = (name: string, value: any) => {\n    setCurrentAlert(currentAlertData => ({\n      ...currentAlertData,\n      [name]: value,\n    }));\n  };\n\n  const loadSourceOptions = useMemo(\n    () =>\n      (input = '', page: number, pageSize: number) => {\n        const query = rison.encode({\n          filter: input,\n          page,\n          page_size: pageSize,\n        });\n        return SupersetClient.get({\n          endpoint: `/api/v1/report/related/database?q=${query}`,\n        }).then(response => {\n          const list = response.json.result.map(\n            (item: { value: number; text: string }) => ({\n              value: item.value,\n              label: item.text,\n            }),\n          );\n          setSourceOptions(list);\n          return { data: list, totalCount: response.json.count };\n        });\n      },\n    [],\n  );\n\n  const dashboard = currentAlert?.dashboard;\n  useEffect(() => {\n    if (!tabsEnabled) return;\n\n    if (dashboard?.value) {\n      SupersetClient.get({\n        endpoint: `/api/v1/dashboard/${dashboard.value}/tabs`,\n      })\n        .then(response => {\n          const { tab_tree: tabTree, all_tabs: allTabs } = response.json.result;\n          setTabOptions(tabTree);\n          const anchor = currentAlert?.extra?.dashboard?.anchor;\n          if (anchor && !(anchor in allTabs)) {\n            updateAnchorState(undefined);\n          }\n        })\n        .catch(() => {\n          addDangerToast(t('There was an error retrieving dashboard tabs.'));\n        });\n    }\n  }, [dashboard, tabsEnabled, currentAlert?.extra, addDangerToast]);\n\n  const databaseLabel = currentAlert?.database && !currentAlert.database.label;\n  useEffect(() => {\n    // Find source if current alert has one set\n    if (databaseLabel) {\n      updateAlertState('database', getSourceData());\n    }\n  }, [databaseLabel, getSourceData]);\n\n  const loadDashboardOptions = useMemo(\n    () =>\n      (input = '', page: number, pageSize: number) => {\n        const query = rison.encode_uri({\n          filter: input,\n          page,\n          page_size: pageSize,\n        });\n        return SupersetClient.get({\n          endpoint: `/api/v1/report/related/dashboard?q=${query}`,\n        }).then(response => {\n          const list = response.json.result.map(\n            (item: { value: number; text: string }) => ({\n              value: item.value,\n              label: item.text,\n            }),\n          );\n          setDashboardOptions(list);\n          return { data: list, totalCount: response.json.count };\n        });\n      },\n    [],\n  );\n\n  const getDashboardData = (db?: MetaObject) => {\n    const dashboard = db || currentAlert?.dashboard;\n\n    if (!dashboard || dashboard.label) {\n      return null;\n    }\n\n    let result;\n\n    // Cycle through dashboard options to find the selected option\n    dashboardOptions.forEach(dash => {\n      if (dash.value === dashboard.value || dash.value === dashboard.id) {\n        result = dash;\n      }\n    });\n\n    return result;\n  };\n\n  const getChartData = useCallback(\n    (chartData?: MetaObject) => {\n      const chart = chartData || currentAlert?.chart;\n\n      if (!chart || chart.label) {\n        return null;\n      }\n\n      let result;\n\n      // Cycle through chart options to find the selected option\n      chartOptions.forEach(slice => {\n        if (slice.value === chart.value || slice.value === chart.id) {\n          result = slice;\n        }\n      });\n\n      return result;\n    },\n    [chartOptions, currentAlert?.chart],\n  );\n\n  const noChartLabel = currentAlert?.chart && !currentAlert?.chart.label;\n  useEffect(() => {\n    // Find source if current alert has one set\n    if (noChartLabel) {\n      updateAlertState('chart', getChartData());\n    }\n  }, [getChartData, noChartLabel]);\n\n  const loadChartOptions = useMemo(\n    () =>\n      (input = '', page: number, pageSize: number) => {\n        const query = rison.encode_uri({\n          filter: input,\n          page,\n          page_size: pageSize,\n        });\n        return SupersetClient.get({\n          endpoint: `/api/v1/report/related/chart?q=${query}`,\n        }).then(response => {\n          const list = response.json.result.map(\n            (item: { value: number; text: string }) => ({\n              value: item.value,\n              label: item.text,\n            }),\n          );\n\n          setChartOptions(list);\n          return { data: list, totalCount: response.json.count };\n        });\n      },\n    [],\n  );\n\n  const getChartVisualizationType = (chart: SelectValue) =>\n    SupersetClient.get({\n      endpoint: `/api/v1/chart/${chart.value}`,\n    }).then(response => setChartVizType(response.json.result.viz_type));\n\n  const updateEmailSubject = () => {\n    const chartLabel = currentAlert?.chart?.label;\n    const dashboardLabel = currentAlert?.dashboard?.label;\n    if (!currentAlert?.name) {\n      setEmailSubject('');\n      return;\n    }\n    switch (contentType) {\n      case ContentType.Chart:\n        setEmailSubject(`${currentAlert?.name}: ${chartLabel || ''}`);\n        break;\n\n      case ContentType.Dashboard:\n        setEmailSubject(`${currentAlert?.name}: ${dashboardLabel || ''}`);\n        break;\n\n      default:\n        setEmailSubject('');\n    }\n  };\n\n  // Handle input/textarea updates\n  const onInputChange = (\n    event: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>,\n  ) => {\n    const {\n      target: { type, value, name },\n    } = event;\n    const parsedValue = type === 'number' ? parseInt(value, 10) || null : value;\n\n    updateAlertState(name, parsedValue);\n\n    if (name === 'name') {\n      updateEmailSubject();\n    }\n  };\n\n  const onCustomWidthChange = (value: number | null | undefined) => {\n    updateAlertState('custom_width', value);\n  };\n\n  const onTimeoutVerifyChange = (\n    event: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>,\n  ) => {\n    const { target } = event;\n    const value = +target.value;\n\n    // Need to make sure grace period is not lower than TIMEOUT_MIN\n    if (value === 0) {\n      updateAlertState(target.name, undefined);\n    } else {\n      updateAlertState(\n        target.name,\n        value ? Math.max(value, TIMEOUT_MIN) : value,\n      );\n    }\n  };\n\n  const onSQLChange = (value: string) => {\n    updateAlertState('sql', value || '');\n  };\n\n  const onOwnersChange = (value: Array<SelectValue>) => {\n    updateAlertState('owners', value || []);\n  };\n\n  const onSourceChange = (value: Array<SelectValue>) => {\n    updateAlertState('database', value || []);\n  };\n\n  const onDashboardChange = (dashboard: SelectValue) => {\n    updateAlertState('dashboard', dashboard || undefined);\n    updateAlertState('chart', null);\n    if (tabsEnabled) {\n      setTabOptions([]);\n      updateAnchorState('');\n    }\n  };\n\n  const onChartChange = (chart: SelectValue) => {\n    getChartVisualizationType(chart);\n    updateAlertState('chart', chart || undefined);\n    updateAlertState('dashboard', null);\n  };\n\n  const onActiveSwitch = (checked: boolean) => {\n    updateAlertState('active', checked);\n  };\n\n  const onConditionChange = (op: Operator) => {\n    setConditionNotNull(op === 'not null');\n\n    const config = {\n      op,\n      threshold: currentAlert\n        ? currentAlert.validator_config_json?.threshold\n        : undefined,\n    };\n\n    updateAlertState('validator_config_json', config);\n  };\n\n  const onThresholdChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { target } = event;\n\n    const config = {\n      op: currentAlert ? currentAlert.validator_config_json?.op : undefined,\n      threshold: target.value,\n    };\n\n    updateAlertState('validator_config_json', config);\n  };\n\n  const onLogRetentionChange = (retention: number) => {\n    updateAlertState('log_retention', retention);\n  };\n\n  const onTimezoneChange = (timezone: string) => {\n    updateAlertState('timezone', timezone);\n  };\n\n  const onContentTypeChange = (value: string) => {\n    // When switch content type, reset force_screenshot to false\n    setForceScreenshot(false);\n    setContentType(value);\n  };\n\n  const onFormatChange = (value: string) => {\n    setReportFormat(value);\n  };\n\n  const onForceScreenshotChange = (event: any) => {\n    setForceScreenshot(event.target.checked);\n  };\n\n  // Make sure notification settings has the required info\n  const checkNotificationSettings = () => {\n    if (!notificationSettings.length) {\n      return false;\n    }\n\n    let hasInfo = false;\n\n    notificationSettings.forEach(setting => {\n      if (!!setting.method && setting.recipients?.length) {\n        hasInfo = true;\n      }\n    });\n\n    return hasInfo;\n  };\n\n  const checkEmailFormat = () => {\n    if (!notificationSettings.length) {\n      return true;\n    }\n\n    const validateEmails = (emails: string): boolean => {\n      if (!emails) return true; // No emails to validate\n      return emails\n        .split(/[,;]/)\n        .every(email => EMAIL_REGEX.test(email.trim()));\n    };\n\n    // Use array method to check conditions\n    return notificationSettings.every(setting => {\n      if (!!setting.method && setting.method === 'Email') {\n        return (\n          (!setting.recipients?.length || validateEmails(setting.recipients)) &&\n          (!setting.cc || validateEmails(setting.cc)) &&\n          (!setting.bcc || validateEmails(setting.bcc))\n        );\n      }\n      return true; // Non-Email methods are considered valid\n    });\n  };\n\n  const validateGeneralSection = () => {\n    const errors = [];\n    if (!currentAlert?.name?.length) {\n      errors.push(TRANSLATIONS.NAME_ERROR_TEXT);\n    }\n    if (!currentAlert?.owners?.length) {\n      errors.push(TRANSLATIONS.OWNERS_ERROR_TEXT);\n    }\n    updateValidationStatus(Sections.General, errors);\n  };\n  const validateContentSection = () => {\n    const errors = [];\n    if (\n      !(\n        (contentType === ContentType.Dashboard && !!currentAlert?.dashboard) ||\n        (contentType === ContentType.Chart && !!currentAlert?.chart)\n      )\n    ) {\n      errors.push(TRANSLATIONS.CONTENT_ERROR_TEXT);\n    }\n    updateValidationStatus(Sections.Content, errors);\n  };\n  const validateAlertSection = () => {\n    const errors = [];\n    if (!currentAlert?.database) {\n      errors.push(TRANSLATIONS.DATABASE_ERROR_TEXT);\n    }\n    if (!currentAlert?.sql?.length) {\n      errors.push(TRANSLATIONS.SQL_ERROR_TEXT);\n    }\n    if (\n      !(\n        (conditionNotNull || !!currentAlert?.validator_config_json?.op) &&\n        (conditionNotNull ||\n          currentAlert?.validator_config_json?.threshold !== undefined)\n      )\n    ) {\n      errors.push(TRANSLATIONS.ALERT_CONDITION_ERROR_TEXT);\n    }\n    updateValidationStatus(Sections.Alert, errors);\n  };\n\n  const validateScheduleSection = () => {\n    const errors = [];\n    if (!currentAlert?.crontab?.length) {\n      errors.push(TRANSLATIONS.CRONTAB_ERROR_TEXT);\n    }\n    if (!currentAlert?.working_timeout) {\n      errors.push(TRANSLATIONS.WORKING_TIMEOUT_ERROR_TEXT);\n    }\n\n    updateValidationStatus(Sections.Schedule, errors);\n  };\n\n  const validateNotificationSection = () => {\n    const errors = [];\n    const hasErrors = !checkNotificationSettings();\n\n    if (hasErrors) {\n      errors.push(TRANSLATIONS.RECIPIENTS_ERROR_TEXT);\n    } else {\n      // Check for email format errors\n      const hasValidationErrors = !checkEmailFormat();\n      if (hasValidationErrors) {\n        errors.push(TRANSLATIONS.EMAIL_VALIDATION_ERROR_TEXT);\n      }\n    }\n\n    if (emailError) {\n      errors.push(TRANSLATIONS.EMAIL_SUBJECT_ERROR_TEXT);\n    }\n\n    // Update validation status with combined errors\n    updateValidationStatus(Sections.Notification, errors);\n  };\n\n  const validateAll = () => {\n    validateGeneralSection();\n    validateContentSection();\n    if (!isReport) validateAlertSection();\n    validateScheduleSection();\n    validateNotificationSection();\n  };\n\n  const enforceValidation = () => {\n    const sections = [\n      Sections.General,\n      Sections.Content,\n      isReport ? undefined : Sections.Alert,\n      Sections.Schedule,\n      Sections.Notification,\n    ];\n\n    const hasErrors = sections.some(\n      section => section && validationStatus[section].hasErrors,\n    );\n    const tooltip = hasErrors ? buildErrorTooltipMessage(validationStatus) : '';\n    setErrorTooltipMessage(tooltip);\n    setDisableSave(hasErrors);\n  };\n\n  // Initialize\n  useEffect(() => {\n    if (\n      isEditMode &&\n      (!currentAlert?.id || alert?.id !== currentAlert.id || (isHidden && show))\n    ) {\n      if (alert?.id !== null && !loading && !fetchError) {\n        const id = alert.id || 0;\n        fetchResource(id);\n      }\n    } else if (\n      !isEditMode &&\n      (!currentAlert || currentAlert.id || (isHidden && show))\n    ) {\n      setCurrentAlert({\n        ...defaultAlert,\n        owners: currentUser\n          ? [\n              {\n                value: currentUser.userId,\n                label: `${currentUser.firstName} ${currentUser.lastName}`,\n              },\n            ]\n          : [],\n      });\n      setNotificationSettings([\n        {\n          recipients: '',\n          cc: '',\n          bcc: '',\n          options: allowedNotificationMethods,\n          method: NotificationMethodOption.Email,\n        },\n      ]);\n      setNotificationAddState('active');\n    }\n  }, [alert]);\n\n  useEffect(() => {\n    if (resource) {\n      // Add notification settings\n      const settings = (resource.recipients || []).map(setting => {\n        const config =\n          typeof setting.recipient_config_json === 'string'\n            ? JSON.parse(setting.recipient_config_json)\n            : {};\n        return {\n          method: setting.type,\n          // @ts-ignore: Type not assignable\n          recipients: config.target || setting.recipient_config_json,\n          options: allowedNotificationMethods,\n          cc: config.ccTarget || '',\n          bcc: config.bccTarget || '',\n        };\n      });\n\n      setNotificationSettings(settings);\n      setNotificationAddState(\n        settings.length === allowedNotificationMethods.length\n          ? 'hidden'\n          : 'active',\n      );\n      setContentType(\n        resource.chart ? ContentType.Chart : ContentType.Dashboard,\n      );\n      setReportFormat(resource.report_format || DEFAULT_NOTIFICATION_FORMAT);\n      const validatorConfig =\n        typeof resource.validator_config_json === 'string'\n          ? JSON.parse(resource.validator_config_json)\n          : resource.validator_config_json;\n\n      setConditionNotNull(resource.validator_type === 'not null');\n\n      if (resource.chart) {\n        setChartVizType((resource.chart as ChartObject).viz_type);\n      }\n      setForceScreenshot(resource.force_screenshot);\n\n      setCurrentAlert({\n        ...resource,\n        chart: resource.chart\n          ? getChartData(resource.chart) || {\n              value: (resource.chart as ChartObject).id,\n              label: (resource.chart as ChartObject).slice_name,\n            }\n          : undefined,\n        dashboard: resource.dashboard\n          ? getDashboardData(resource.dashboard) || {\n              value: (resource.dashboard as DashboardObject).id,\n              label: (resource.dashboard as DashboardObject).dashboard_title,\n            }\n          : undefined,\n        database: resource.database\n          ? getSourceData(resource.database) || {\n              value: (resource.database as DatabaseObject).id,\n              label: (resource.database as DatabaseObject).database_name,\n            }\n          : undefined,\n        owners: (alert?.owners || []).map(owner => ({\n          value: (owner as MetaObject).value || owner.id,\n          label:\n            (owner as MetaObject).label ||\n            `${(owner as Owner).first_name} ${(owner as Owner).last_name}`,\n        })),\n        // @ts-ignore: Type not assignable\n        validator_config_json:\n          resource.validator_type === 'not null'\n            ? {\n                op: 'not null',\n              }\n            : validatorConfig,\n      });\n    }\n  }, [resource]);\n\n  // Validation\n  const currentAlertSafe = currentAlert || {};\n  useEffect(() => {\n    validateAll();\n    updateEmailSubject();\n  }, [\n    currentAlertSafe.name,\n    currentAlertSafe.owners,\n    currentAlertSafe.database,\n    currentAlertSafe.sql,\n    currentAlertSafe.validator_config_json,\n    currentAlertSafe.crontab,\n    currentAlertSafe.working_timeout,\n    currentAlertSafe.dashboard,\n    currentAlertSafe.chart,\n    contentType,\n    notificationSettings,\n    conditionNotNull,\n    emailError,\n  ]);\n  useEffect(() => {\n    enforceValidation();\n  }, [validationStatus]);\n\n  const allowedNotificationMethodsCount = useMemo(\n    () =>\n      allowedNotificationMethods.reduce((accum: string[], setting: string) => {\n        if (\n          accum.some(nm => nm.includes('slack')) &&\n          setting.toLowerCase().includes('slack')\n        ) {\n          return accum;\n        }\n        return [...accum, setting.toLowerCase()];\n      }, []).length,\n    [allowedNotificationMethods],\n  );\n\n  // Show/hide\n  if (isHidden && show) {\n    setIsHidden(false);\n  }\n\n  const getTitleText = () => {\n    let titleText;\n\n    switch (true) {\n      case isEditMode && isReport:\n        titleText = t('Edit Report');\n        break;\n      case isEditMode:\n        titleText = t('Edit Alert');\n        break;\n      case isReport:\n        titleText = t('Add Report');\n        break;\n      default:\n        titleText = t('Add Alert');\n        break;\n    }\n\n    return titleText;\n  };\n\n  const handleErrorUpdate = (hasError: boolean) => {\n    setEmailError(hasError);\n  };\n\n  return (\n    <StyledModal\n      className=\"no-content-padding\"\n      responsive\n      disablePrimaryButton={disableSave}\n      primaryTooltipMessage={errorTooltipMessage}\n      onHandledPrimaryAction={onSave}\n      onHide={hide}\n      primaryButtonName={isEditMode ? t('Save') : t('Add')}\n      show={show}\n      width=\"500px\"\n      centered\n      title={<h4 data-test=\"alert-report-modal-title\">{getTitleText()}</h4>}\n    >\n      <Collapse\n        expandIconPosition=\"right\"\n        defaultActiveKey=\"general\"\n        accordion\n        css={css`\n          border: 'none';\n        `}\n      >\n        <StyledPanel\n          header={\n            <ValidatedPanelHeader\n              title={TRANSLATIONS.GENERAL_TITLE}\n              subtitle={t(\n                'Set up basic details, such as name and description.',\n              )}\n              validateCheckStatus={\n                !validationStatus[Sections.General].hasErrors\n              }\n              testId=\"general-information-panel\"\n            />\n          }\n          key=\"general\"\n        >\n          <div className=\"header-section\">\n            <StyledInputContainer>\n              <div className=\"control-label\">\n                {isReport ? t('Report name') : t('Alert name')}\n                <span className=\"required\">*</span>\n              </div>\n              <div className=\"input-container\">\n                <input\n                  type=\"text\"\n                  name=\"name\"\n                  value={currentAlert ? currentAlert.name : ''}\n                  placeholder={\n                    isReport ? t('Enter report name') : t('Enter alert name')\n                  }\n                  onChange={onInputChange}\n                />\n              </div>\n            </StyledInputContainer>\n            <StyledInputContainer>\n              <div className=\"control-label\">\n                {t('Owners')}\n                <span className=\"required\">*</span>\n              </div>\n              <div data-test=\"owners-select\" className=\"input-container\">\n                <AsyncSelect\n                  ariaLabel={t('Owners')}\n                  allowClear\n                  name=\"owners\"\n                  mode=\"multiple\"\n                  placeholder={t('Select owners')}\n                  value={\n                    (currentAlert?.owners as {\n                      label: string;\n                      value: number;\n                    }[]) || []\n                  }\n                  options={loadOwnerOptions}\n                  onChange={onOwnersChange}\n                />\n              </div>\n            </StyledInputContainer>\n            <StyledInputContainer>\n              <div className=\"control-label\">{t('Description')}</div>\n              <div className=\"input-container\">\n                <input\n                  type=\"text\"\n                  name=\"description\"\n                  value={currentAlert ? currentAlert.description || '' : ''}\n                  placeholder={t(\n                    'Include description to be sent with %s',\n                    reportOrAlert,\n                  )}\n                  onChange={onInputChange}\n                />\n              </div>\n            </StyledInputContainer>\n            <StyledSwitchContainer>\n              <Switch\n                checked={currentAlert ? currentAlert.active : false}\n                defaultChecked\n                onChange={onActiveSwitch}\n              />\n              <div className=\"switch-label\">\n                {isReport ? t('Report is active') : t('Alert is active')}\n              </div>\n            </StyledSwitchContainer>\n          </div>\n        </StyledPanel>\n        {!isReport && (\n          <StyledPanel\n            header={\n              <ValidatedPanelHeader\n                title={TRANSLATIONS.ALERT_CONDITION_TITLE}\n                subtitle={t(\n                  'Define the database, SQL query, and triggering conditions for alert.',\n                )}\n                validateCheckStatus={\n                  !validationStatus[Sections.Alert].hasErrors\n                }\n                testId=\"alert-condition-panel\"\n              />\n            }\n            key=\"condition\"\n          >\n            <StyledInputContainer>\n              <div className=\"control-label\">\n                {t('Database')}\n                <span className=\"required\">*</span>\n              </div>\n              <div className=\"input-container\">\n                <AsyncSelect\n                  ariaLabel={t('Database')}\n                  name=\"source\"\n                  placeholder={t('Select database')}\n                  value={\n                    currentAlert?.database?.label &&\n                    currentAlert?.database?.value\n                      ? {\n                          value: currentAlert.database.value,\n                          label: currentAlert.database.label,\n                        }\n                      : undefined\n                  }\n                  options={loadSourceOptions}\n                  onChange={onSourceChange}\n                />\n              </div>\n            </StyledInputContainer>\n            <StyledInputContainer>\n              <div className=\"control-label\">\n                {t('SQL Query')}\n                <StyledTooltip\n                  tooltip={t(\n                    'The result of this query must be a value capable of numeric interpretation e.g. 1, 1.0, or \"1\" (compatible with Python\\'s float() function).',\n                  )}\n                />\n                <span className=\"required\">*</span>\n              </div>\n              <TextAreaControl\n                name=\"sql\"\n                language=\"sql\"\n                offerEditInModal={false}\n                minLines={15}\n                maxLines={15}\n                onChange={onSQLChange}\n                readOnly={false}\n                initialValue={resource?.sql}\n                key={currentAlert?.id}\n              />\n            </StyledInputContainer>\n            <div className=\"inline-container wrap\">\n              <StyledInputContainer css={noMarginBottom}>\n                <div className=\"control-label\" css={inputSpacer}>\n                  {t('Trigger Alert If...')}\n                  <span className=\"required\">*</span>\n                </div>\n                <div className=\"input-container\">\n                  <Select\n                    ariaLabel={t('Condition')}\n                    onChange={onConditionChange}\n                    placeholder={t('Condition')}\n                    value={currentAlert?.validator_config_json?.op || undefined}\n                    options={CONDITIONS}\n                    css={inputSpacer}\n                  />\n                </div>\n              </StyledInputContainer>\n              <StyledInputContainer css={noMarginBottom}>\n                <div className=\"control-label\">\n                  {t('Value')}{' '}\n                  {!conditionNotNull && <span className=\"required\">*</span>}\n                </div>\n                <div className=\"input-container\">\n                  <input\n                    type=\"number\"\n                    name=\"threshold\"\n                    disabled={conditionNotNull}\n                    value={\n                      currentAlert?.validator_config_json?.threshold !==\n                        undefined && !conditionNotNull\n                        ? currentAlert.validator_config_json.threshold\n                        : ''\n                    }\n                    placeholder={t('Value')}\n                    onChange={onThresholdChange}\n                  />\n                </div>\n              </StyledInputContainer>\n            </div>\n          </StyledPanel>\n        )}\n        <StyledPanel\n          header={\n            <ValidatedPanelHeader\n              title={\n                isReport\n                  ? TRANSLATIONS.REPORT_CONTENTS_TITLE\n                  : TRANSLATIONS.ALERT_CONTENTS_TITLE\n              }\n              subtitle={t('Customize data source, filters, and layout.')}\n              validateCheckStatus={\n                !validationStatus[Sections.Content].hasErrors\n              }\n              testId=\"contents-panel\"\n            />\n          }\n          key=\"contents\"\n        >\n          <StyledInputContainer>\n            <div className=\"control-label\">\n              {t('Content type')}\n              <span className=\"required\">*</span>\n            </div>\n            <Select\n              ariaLabel={t('Select content type')}\n              onChange={onContentTypeChange}\n              value={contentType}\n              options={CONTENT_TYPE_OPTIONS}\n              placeholder={t('Select content type')}\n            />\n          </StyledInputContainer>\n          <StyledInputContainer>\n            {contentType === ContentType.Chart ? (\n              <>\n                <div className=\"control-label\">\n                  {t('Select chart')}\n                  <span className=\"required\">*</span>\n                </div>\n                <AsyncSelect\n                  ariaLabel={t('Chart')}\n                  name=\"chart\"\n                  value={\n                    currentAlert?.chart?.label && currentAlert?.chart?.value\n                      ? {\n                          value: currentAlert.chart.value,\n                          label: currentAlert.chart.label,\n                        }\n                      : undefined\n                  }\n                  options={loadChartOptions}\n                  onChange={onChartChange}\n                  placeholder={t('Select chart to use')}\n                />\n              </>\n            ) : (\n              <>\n                <div className=\"control-label\">\n                  {t('Select dashboard')}\n                  <span className=\"required\">*</span>\n                </div>\n                <AsyncSelect\n                  ariaLabel={t('Dashboard')}\n                  name=\"dashboard\"\n                  value={\n                    currentAlert?.dashboard?.label &&\n                    currentAlert?.dashboard?.value\n                      ? {\n                          value: currentAlert.dashboard.value,\n                          label: currentAlert.dashboard.label,\n                        }\n                      : undefined\n                  }\n                  options={loadDashboardOptions}\n                  onChange={onDashboardChange}\n                  placeholder={t('Select dashboard to use')}\n                />\n              </>\n            )}\n          </StyledInputContainer>\n          <StyledInputContainer\n            css={\n              ['PDF', 'TEXT', 'CSV'].includes(reportFormat) && noMarginBottom\n            }\n          >\n            {formatOptionEnabled && (\n              <>\n                <div className=\"control-label\">\n                  {t('Content format')}\n                  <span className=\"required\">*</span>\n                </div>\n                <Select\n                  ariaLabel={t('Select format')}\n                  onChange={onFormatChange}\n                  value={reportFormat}\n                  options={\n                    contentType === ContentType.Dashboard\n                      ? ['pdf', 'png'].map(key => FORMAT_OPTIONS[key])\n                      : /* If chart is of text based viz type: show text\n                  format option */\n                        TEXT_BASED_VISUALIZATION_TYPES.includes(chartVizType)\n                        ? Object.values(FORMAT_OPTIONS)\n                        : ['pdf', 'png', 'csv'].map(key => FORMAT_OPTIONS[key])\n                  }\n                  placeholder={t('Select format')}\n                />\n              </>\n            )}\n          </StyledInputContainer>\n          {tabsEnabled && contentType === ContentType.Dashboard && (\n            <StyledInputContainer>\n              <>\n                <div className=\"control-label\">{t('Select tab')}</div>\n                <StyledTreeSelect\n                  disabled={tabOptions?.length === 0}\n                  treeData={tabOptions}\n                  value={currentAlert?.extra?.dashboard?.anchor}\n                  onSelect={updateAnchorState}\n                  placeholder={t('Select a tab')}\n                />\n              </>\n            </StyledInputContainer>\n          )}\n          {isScreenshot && (\n            <StyledInputContainer\n              css={\n                !isReport && contentType === ContentType.Chart && noMarginBottom\n              }\n            >\n              <div className=\"control-label\">{t('Screenshot width')}</div>\n              <div className=\"input-container\">\n                <InputNumber\n                  type=\"number\"\n                  name=\"custom_width\"\n                  value={currentAlert?.custom_width || undefined}\n                  min={600}\n                  max={2400}\n                  placeholder={t('Input custom width in pixels')}\n                  onChange={onCustomWidthChange}\n                />\n              </div>\n            </StyledInputContainer>\n          )}\n          {(isReport || contentType === ContentType.Dashboard) && (\n            <div className=\"inline-container\">\n              <StyledCheckbox\n                data-test=\"bypass-cache\"\n                className=\"checkbox\"\n                checked={forceScreenshot}\n                onChange={onForceScreenshotChange}\n              >\n                {t('Ignore cache when generating report')}\n              </StyledCheckbox>\n            </div>\n          )}\n        </StyledPanel>\n        <StyledPanel\n          header={\n            <ValidatedPanelHeader\n              title={TRANSLATIONS.SCHEDULE_TITLE}\n              subtitle={t(\n                'Define delivery schedule, timezone, and frequency settings.',\n              )}\n              validateCheckStatus={\n                !validationStatus[Sections.Schedule].hasErrors\n              }\n              testId=\"schedule-panel\"\n            />\n          }\n          key=\"schedule\"\n        >\n          <AlertReportCronScheduler\n            value={currentAlert?.crontab || ''}\n            onChange={newVal => updateAlertState('crontab', newVal)}\n          />\n          <StyledInputContainer>\n            <div className=\"control-label\">\n              {t('Timezone')} <span className=\"required\">*</span>\n            </div>\n            <TimezoneSelector\n              onTimezoneChange={onTimezoneChange}\n              timezone={currentAlert?.timezone}\n              minWidth=\"100%\"\n            />\n          </StyledInputContainer>\n          <StyledInputContainer>\n            <div className=\"control-label\">\n              {t('Log retention')}\n              <span className=\"required\">*</span>\n            </div>\n            <div className=\"input-container\">\n              <Select\n                ariaLabel={t('Log retention')}\n                placeholder={t('Log retention')}\n                onChange={onLogRetentionChange}\n                value={currentAlert?.log_retention}\n                options={RETENTION_OPTIONS}\n                sortComparator={propertyComparator('value')}\n              />\n            </div>\n          </StyledInputContainer>\n          <StyledInputContainer css={noMarginBottom}>\n            {isReport ? (\n              <>\n                <div className=\"control-label\">\n                  {t('Working timeout')}\n                  <span className=\"required\">*</span>\n                </div>\n                <div className=\"input-container\">\n                  <NumberInput\n                    min={1}\n                    name=\"working_timeout\"\n                    value={currentAlert?.working_timeout || ''}\n                    placeholder={t('Time in seconds')}\n                    onChange={onTimeoutVerifyChange}\n                    timeUnit={t('seconds')}\n                  />\n                </div>\n              </>\n            ) : (\n              <>\n                <div className=\"control-label\">{t('Grace period')}</div>\n                <div className=\"input-container\">\n                  <NumberInput\n                    min={1}\n                    name=\"grace_period\"\n                    value={currentAlert?.grace_period || ''}\n                    placeholder={t('Time in seconds')}\n                    onChange={onTimeoutVerifyChange}\n                    timeUnit={t('seconds')}\n                  />\n                </div>\n              </>\n            )}\n          </StyledInputContainer>\n        </StyledPanel>\n        <StyledPanel\n          header={\n            <ValidatedPanelHeader\n              title={TRANSLATIONS.NOTIFICATION_TITLE}\n              subtitle={t('Choose notification method and recipients.')}\n              validateCheckStatus={\n                !validationStatus[Sections.Notification].hasErrors\n              }\n              testId=\"notification-method-panel\"\n            />\n          }\n          key=\"notification\"\n        >\n          {notificationSettings.map((notificationSetting, i) => (\n            <StyledNotificationMethodWrapper>\n              <NotificationMethod\n                setting={notificationSetting}\n                index={i}\n                key={`NotificationMethod-${i}`}\n                onUpdate={updateNotificationSetting}\n                onRemove={removeNotificationSetting}\n                onInputChange={onInputChange}\n                email_subject={currentAlert?.email_subject || ''}\n                defaultSubject={emailSubject || ''}\n                setErrorSubject={handleErrorUpdate}\n              />\n            </StyledNotificationMethodWrapper>\n          ))}\n          {\n            // Prohibit 'add notification method' button if only one present\n            allowedNotificationMethodsCount > notificationSettings.length && (\n              <NotificationMethodAdd\n                data-test=\"notification-add\"\n                status={notificationAddState}\n                onClick={onNotificationAdd}\n              />\n            )\n          }\n        </StyledPanel>\n      </Collapse>\n    </StyledModal>\n  );\n};\n\nexport default withToasts(AlertReportModal);\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport Owner from 'src/types/Owner';\nimport { NotificationFormats } from 'src/features/reports/types';\n\ntype user = {\n  id: number;\n  first_name: string;\n  last_name: string;\n};\nexport type ChartObject = {\n  id: number;\n  slice_name: string;\n  viz_type: string;\n};\n\nexport type DashboardObject = {\n  dashboard_title: string;\n  id: number;\n};\n\nexport type DatabaseObject = {\n  database_name: string;\n  id: number;\n};\n\nexport enum NotificationMethodOption {\n  Email = 'Email',\n  Slack = 'Slack',\n  SlackV2 = 'SlackV2',\n}\n\nexport type SelectValue = {\n  value: string;\n  label: string;\n};\n\nexport type NotificationSetting = {\n  method?: NotificationMethodOption;\n  recipients: string;\n  cc?: string;\n  bcc?: string;\n  options: NotificationMethodOption[];\n};\n\nexport type SlackChannel = {\n  id: string;\n  name: string;\n  is_member: boolean;\n  is_private: boolean;\n};\n\nexport type TabNode = {\n  title: string;\n  value: string;\n  children?: TabNode[];\n};\n\nexport type Recipient = {\n  recipient_config_json: {\n    target: string;\n    ccTarget?: string;\n    bccTarget?: string;\n  };\n  type: NotificationMethodOption;\n};\n\nexport type MetaObject = {\n  id?: number;\n  label?: string;\n  value?: number | string;\n};\n\nexport type DashboardState = {\n  activeTabs?: Array<string>;\n  dataMask?: Object;\n  anchor?: string;\n};\n\nexport type Extra = {\n  dashboard?: DashboardState;\n};\n\nexport type Operator = '<' | '>' | '<=' | '>=' | '==' | '!=' | 'not null';\n\nexport type AlertObject = {\n  active?: boolean;\n  creation_method?: string;\n  chart?: MetaObject;\n  changed_by?: user;\n  changed_on_delta_humanized?: string;\n  chart_id: number;\n  created_by?: user;\n  created_on?: string;\n  crontab?: string;\n  custom_width?: number | null;\n  dashboard?: MetaObject;\n  dashboard_id?: number;\n  database?: MetaObject;\n  description?: string;\n  email_subject?: string;\n  error?: string;\n  extra?: Extra;\n  force_screenshot: boolean;\n  grace_period?: number;\n  id: number;\n  last_eval_dttm?: number;\n  last_state?: 'Success' | 'Working' | 'Error' | 'Not triggered' | 'On Grace';\n  log_retention?: number;\n  name?: string;\n  owners?: Array<Owner | MetaObject>;\n  sql?: string;\n  timezone?: string;\n  recipients?: Array<Recipient>;\n  report_format?: NotificationFormats;\n  type?: string;\n  validator_config_json?: {\n    op?: Operator;\n    threshold?: number;\n  };\n  validator_type?: string;\n  working_timeout?: number;\n};\n\nexport type LogObject = {\n  end_dttm: string;\n  error_message: string;\n  id: number;\n  scheduled_dttm: string;\n  start_dttm: string;\n  state: string;\n  value: string;\n  uuid: string;\n};\n\nexport enum AlertState {\n  Success = 'Success',\n  Working = 'Working',\n  Error = 'Error',\n  Noop = 'Not triggered',\n  Grace = 'On Grace',\n}\n\nexport enum RecipientIconName {\n  Email = 'Email',\n  Slack = 'Slack',\n  SlackV2 = 'SlackV2',\n}\nexport interface AlertsReportsConfig {\n  ALERT_REPORTS_DEFAULT_WORKING_TIMEOUT: number;\n  ALERT_REPORTS_DEFAULT_RETENTION: number;\n  ALERT_REPORTS_DEFAULT_CRON_VALUE: string;\n}\n\nexport type SectionValidationObject = {\n  hasErrors: boolean;\n  errors: string[];\n  name: string;\n};\n\nexport interface ValidationObject {\n  [key: string]: SectionValidationObject;\n}\n\nexport enum Sections {\n  General = 'generalSection',\n  Content = 'contentSection',\n  Alert = 'alertConditionSection',\n  Schedule = 'scheduleSection',\n  Notification = 'notificationSection',\n}\n\nexport enum ContentType {\n  Dashboard = 'dashboard',\n  Chart = 'chart',\n}\n"],"names":["propTypes","name","PropTypes","onChange","initialValue","height","minLines","maxLines","offerEditInModal","language","aboveEditorSection","readOnly","resize","textAreaStyles","TextAreaControl","Component","onControlChange","event","value","target","this","props","onAreaEditorChange","renderEditor","inModal","style","border","theme","colors","grayscale","light1","minHeight","width","backgroundColor","_jsx","TextAreaEditor","mode","editorProps","$blockScrolling","defaultValue","bind","TextArea","placeholder","t","disabled","renderModalBody","_jsxs","_Fragment","children","render","controlHeader","ControlHeader","ModalTrigger","modalTitle","triggerNode","Button","buttonSize","className","modalBody","responsive","defaultProps","withTheme","LOCALE","everyText","emptyMonths","emptyMonthDays","emptyMonthDaysShort","emptyWeekDays","emptyWeekDaysShort","emptyHours","emptyMinutes","emptyMinutesForHourPeriod","yearOption","monthOption","weekOption","dayOption","hourOption","minuteOption","rebootOption","prefixPeriod","prefixMonths","prefixMonthDays","prefixWeekDays","prefixWeekDaysForMonthAndYearPeriod","prefixHours","prefixMinutes","prefixMinutesForHourPeriod","suffixMinutesForHourPeriod","errorInvalidCron","clearButtonText","weekDays","months","altWeekDays","altMonths","CronPicker","styled","ConfigProvider","getPopupContainer","trigger","parentElement","ReactCronPicker","locale","gridUnit","DEFAULT_TIMEZONE","MIN_SELECT_WIDTH","offsetsToName","TimezoneSelector","onTimezoneChange","timezone","minWidth","momentLib","setMomentLib","useState","useEffect","then","default","TIMEZONE_OPTIONS","TIMEZONE_OPTIONS_SORT_COMPARATOR","validTimezone","useMemo","currentDate","JANUARY","JULY","getOffsetKey","tz","utcOffset","toString","getTimezoneName","_offsetsToName$offset","_offsetsToName$offset2","offsets","isDST","ALL_ZONES","countries","map","country","zonesForCountry","flat","TIMEZONES","forEach","zone","find","option","push","label","format","timezoneName","a","b","sort","matchTimezoneToOptions","_TIMEZONE_OPTIONS$fin","guess","Select","ariaLabel","css","_css","options","sortComparator","Loading","position","NumberInput","timeUnit","min","isFocused","setIsFocused","type","onFocus","onBlur","ScheduleType","SCHEDULE_TYPE_OPTIONS","Picker","Input","AlertReportCronScheduler","useTheme","inputRef","useRef","scheduleFormat","setScheduleFormat","customSetValue","useCallback","newValue","_inputRef$current","current","setValue","handleBlur","handlePressEnter","_inputRef$current2","input","error","onError","StyledInputContainer","e","ref","borderColor","base","onPressEnter","clearButton","displayError","StyledNotificationMethod","div","typography","sizes","s","primary","dark1","TRANSLATIONS","EMAIL_CC_NAME","EMAIL_BCC_NAME","EMAIL_SUBJECT_NAME","EMAIL_SUBJECT_ERROR_TEXT","NotificationMethod","setting","index","onUpdate","onRemove","onInputChange","email_subject","defaultSubject","setErrorSubject","method","recipients","cc","bcc","recipientValue","setRecipientValue","slackRecipients","setSlackRecipients","setError","ccVisible","setCcVisible","bccVisible","setBccVisible","ccValue","setCcValue","bccValue","setBccValue","methodOptionsLoading","setMethodOptionsLoading","slackOptions","setSlackOptions","useSlackV1","setUseSlackV1","_slackOptions$","some","NotificationMethodOption","Slack","SlackV2","length","async","searchString","types","exactMatch","endpoint","rison","SupersetClient","get","fetchSlackChannels","json","result","mapChannelsToOptions","publicChannels","privateChannels","channel","is_private","is_member","id","key","isFeatureEnabled","FeatureFlag","AlertReportSlackV2","publicOptions","privateOptions","includes","mapSlackValues","prop","split","recipient","trim","toLowerCase","filter","val","catch","finally","methodOptions","Email","labelInValue","selected","updatedSetting","showSearch","loading","role","tabIndex","onClick","Icons","Trash","iconColor","undefined","hasError","color","fontSize","obj","join","allowClear","allowSelectAll","display","ValidatedPanelHeader","title","subtitle","validateCheckStatus","testId","checkmark","CheckCircleOutlined","AntdCollapse","Panel","antdPanelStyles","anticonHeight","weights","bold","normal","warning","success","StyledList","ul","TEXT_BASED_VISUALIZATION_TYPES","EMAIL_REGEX","DEFAULT_NOTIFICATION_METHODS","DEFAULT_NOTIFICATION_FORMAT","DEFAULT_EXTRA_DASHBOARD_OPTIONS","dashboard","anchor","CONDITIONS","RETENTION_OPTIONS","CONTENT_TYPE_OPTIONS","FORMAT_OPTIONS","pdf","png","csv","txt","noMarginBottom","StyledModal","Modal","StyledTreeSelect","TreeSelect","StyledSwitchContainer","light2","StyledCheckbox","AntdCheckbox","StyledTooltip","InfoTooltipWithTrigger","StyledNotificationAddButton","StyledNotificationMethodWrapper","inputSpacer","GENERAL_TITLE","ALERT_CONDITION_TITLE","ALERT_CONTENTS_TITLE","REPORT_CONTENTS_TITLE","SCHEDULE_TITLE","NOTIFICATION_TITLE","NAME_ERROR_TEXT","OWNERS_ERROR_TEXT","CONTENT_ERROR_TEXT","DATABASE_ERROR_TEXT","SQL_ERROR_TEXT","ALERT_CONDITION_ERROR_TEXT","CRONTAB_ERROR_TEXT","WORKING_TIMEOUT_ERROR_TEXT","RECIPIENTS_ERROR_TEXT","EMAIL_VALIDATION_ERROR_TEXT","ERROR_TOOLTIP_MESSAGE","NotificationMethodAdd","status","checkStatus","withToasts","AlertReportModal","addDangerToast","onAdd","onHide","show","alert","isReport","addSuccessToast","_currentAlert$databas2","_currentAlert$databas3","_currentAlert$validat5","_currentAlert$validat6","_currentAlert$chart3","_currentAlert$chart4","_currentAlert$dashboa3","_currentAlert$dashboa4","_currentAlert$extra2","_currentAlert$extra2$","currentUser","useSelector","state","user","conf","useCommonConf","allowedNotificationMethods","ALERT_REPORTS_NOTIFICATION_METHODS","disableSave","setDisableSave","currentAlert","setCurrentAlert","isHidden","setIsHidden","contentType","setContentType","reportFormat","setReportFormat","forceScreenshot","setForceScreenshot","isScreenshot","setIsScreenshot","conditionNotNull","setConditionNotNull","sourceOptions","setSourceOptions","dashboardOptions","setDashboardOptions","chartOptions","setChartOptions","tabOptions","setTabOptions","validationStatus","setValidationStatus","Sections","General","hasErrors","errors","Content","Alert","Schedule","Notification","errorTooltipMessage","setErrorTooltipMessage","updateValidationStatus","section","currentValidationData","chartVizType","setChartVizType","reportOrAlert","isEditMode","formatOptionEnabled","AlertsAttachReports","tabsEnabled","AlertReportTabs","notificationAddState","setNotificationAddState","notificationSettings","setNotificationSettings","emailSubject","setEmailSubject","emailError","setEmailError","ALERT_REPORTS_DEFAULT_WORKING_TIMEOUT","ALERT_REPORTS_DEFAULT_CRON_VALUE","ALERT_REPORTS_DEFAULT_RETENTION","_state$common","_conf$ALERT_REPORTS_D","_conf$ALERT_REPORTS_D2","_conf$ALERT_REPORTS_D3","common","defaultAlert","active","creation_method","crontab","extra","log_retention","working_timeout","owners","sql","validator_config_json","validator_type","force_screenshot","grace_period","updateNotificationSetting","settings","_","idx","removeNotificationSetting","slice","splice","updateAnchorState","currentAlertData","_currentAlertData$ext","resource","fetchError","fetchResource","createResource","updateResource","clearError","useSingleViewResource","hide","loadOwnerOptions","page","pageSize","query","page_size","response","data","item","text","totalCount","count","getSourceData","db","database","source","updateAlertState","loadSourceOptions","list","_currentAlert$extra","_currentAlert$extra$d","tab_tree","tabTree","all_tabs","allTabs","databaseLabel","loadDashboardOptions","getDashboardData","dash","getChartData","chartData","chart","noChartLabel","loadChartOptions","updateEmailSubject","_currentAlert$chart2","_currentAlert$dashboa2","chartLabel","dashboardLabel","ContentType","Chart","Dashboard","parsedValue","parseInt","onTimeoutVerifyChange","Math","max","validateAll","validateGeneralSection","_currentAlert$name","_currentAlert$owners","validateContentSection","validateAlertSection","_currentAlert$sql","_currentAlert$validat3","_currentAlert$validat4","op","threshold","validateScheduleSection","_currentAlert$crontab","validateNotificationSection","checkNotificationSettings","hasInfo","_setting$recipients","checkEmailFormat","validateEmails","emails","every","email","test","_setting$recipients2","userId","firstName","lastName","config","recipient_config_json","JSON","parse","ccTarget","bccTarget","report_format","validatorConfig","viz_type","slice_name","dashboard_title","database_name","owner","first_name","last_name","currentAlertSafe","enforceValidation","tooltip","buildErrorTooltipMessage","sectionErrors","Object","values","sectionTitle","err","allowedNotificationMethodsCount","reduce","accum","nm","handleErrorUpdate","disablePrimaryButton","primaryTooltipMessage","onHandledPrimaryAction","onSave","_currentAlert$chart","_currentAlert$dashboa","_currentAlert$databas","shouldEnableForceScreenshot","custom_width","context_markdown","update_id","created_by","last_eval_dttm","last_state","last_value","last_value_row_json","primaryButtonName","centered","getTitleText","titleText","Collapse","expandIconPosition","defaultActiveKey","accordion","StyledPanel","header","AsyncSelect","description","Switch","checked","defaultChecked","_currentAlert$validat","_currentAlert$validat2","getChartVisualizationType","treeData","onSelect","InputNumber","newVal","retention","propertyComparator","notificationSetting","i","onNotificationAdd","AlertState","RecipientIconName"],"sourceRoot":""}